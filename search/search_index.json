{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agentic AI Bootcamp","text":"<p>In this Agentic AI Bootcamp, you will build and deploy Agentic AI application prototypes for enterprise use cases.</p>"},{"location":"#agenda","title":"AGENDA","text":"<p>You will learn about:</p> <p>\ud83d\ude80 AI Agents and evolving market landscape</p> <p>\ud83d\ude80 IBM's Vision for Agentic AI</p> <p>\ud83d\ude80 IBM's Agenitc AI Solutions and Offerings</p> <p>\ud83d\ude80 You'll leverage IBM watsonx and open source tools for low-code fast prototyping of Agentic AI workflows.</p> <p>\ud83d\ude80 You'll learn how to deploy an Agentic AI application and the trust considerations needed to go to production.</p>"},{"location":"conclusion/","title":"Conclusion","text":"<p>Thank you for taking the IBM Agentic AI Bootcamp!</p>"},{"location":"conclusion/#next-steps","title":"Next steps","text":"<ul> <li>Bring your own use cases and QnA.</li> <li>Discover and try IBM's AI portfolio across IBM watsonx through Digital Self-Service Co-Create Experience on: dsce.ibm.com</li> <li>Connect with us to co-create a Pilot in 4-5 weeks.</li> </ul>"},{"location":"show-and-tell/","title":"Show and tell","text":""},{"location":"show-and-tell/#goal-of-the-bootcamp","title":"Goal of the bootcamp","text":"<ul> <li>Show value of IBM (Agentic AI) technology</li> <li>Get partners excited with a tangible outcome and learning experience</li> <li>Discover the use case, identify the opportunities &amp; pilots</li> <li>Badges</li> </ul>"},{"location":"show-and-tell/#targeted-audience","title":"Targeted audience","text":"<ul> <li>Partners interested in leveraging Agentic AI</li> </ul>"},{"location":"show-and-tell/#topics-covered","title":"Topics covered","text":"<ul> <li> <p>Agentic AI Governance</p> </li> <li> <p>watsonx Orchestrate\u00a0platform walkthrough</p> </li> <li> <p>watsonx Assistant Builder</p> </li> <li> <p>watsonx Orchestrate Agent Builder</p> </li> <li> <p>Multi-Agent Industry demos</p> </li> </ul>"},{"location":"demo-use-cases/travel-planner-demo/","title":"Travel planner assistant","text":"<p>An agent that helps users plan trips by gathering information about destinations, predicting weather conditions, and recommending activities based on real-time data.</p> <p>(video coming soon)</p> <p>\ud83d\ude80 Interactive Live demo on DSCE</p>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/","title":"Lab guide - Cashless claim process: customer support &amp; Pre-authorization","text":"<p>This guide will help you to build and test the use case</p>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#build-and-run","title":"\u23f3 Build and run","text":""},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#download-lab-files","title":"Download lab files","text":"<p>Download the required lab files from here. Unzip it to some folder.</p>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#create-project-structure","title":"Create project structure","text":"<p>Create following folder structure -</p> <pre><code>wxo-agents ---\n              |---agents\n              |---tools\n              |---knowledge_base\n                  |---documents\n              |---requirements.txt\n              |---.importAll.sh\n</code></pre>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#creating-tools","title":"Creating tools","text":"<p>There are many tools used in this use-case, however, for lab purpose we will be creating one python tool and will import rest of the required tool.</p> <p>Create a tool to call a decision service to calculate the pre-authorized amount.</p> <p>Steps -  1. create a file 'calculate_preauth_amount.py' 2. add following imports to your file <pre><code>from pydantic import Field, BaseModel\nfrom typing import Optional\nfrom ibm_watsonx_orchestrate.agent_builder.tools import tool\nimport requests\n</code></pre> 3. add following method  <pre><code>def calculate_preauth_amount(\n        estimated_treatment_cost: float,\n        policy_coverage_limit: float,\n        disease_category:str,\n        hospital_tier: int,\n        co_payment_percentage: float,\n) -&gt; dict:\n    \"\"\"\n    Calculate pre-authorization amount for insurance claims.\n    Accepts parameters as keyword arguments which will be converted to ClaimPreauthAmountRequest.\n    \"\"\"\n    try:\n\n        req = {\n            \"estimated_treatment_cost\": estimated_treatment_cost,\n            \"policy_coverage_limit\": policy_coverage_limit,\n            \"disease_category\": disease_category,\n            \"co_payment_percentage\": co_payment_percentage,\n            \"hospital_tier\": hospital_tier\n        }\n        base_url = \"https://preauthorisation-ordermanagement.cp4bautomation-685c4d909dba5536870f4da931535b5a-0000.eu-de.containers.appdomain.cloud/preauth/calculate\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        response = requests.post(\n            base_url,\n            headers=headers,\n            json=req\n        )\n        response.raise_for_status()\n\n        response_data = response.json()\n        return response_data\n\n    except Exception as e:\n        return dict(\n            approved_amount=0,\n            currency=\"INR\",\n            message=f\"Error: {str(e)}\"\n        )\n</code></pre> 4. add below decorator to calculate_preauth_amount method  <pre><code>@tool(name=\"calculate_preauth_amount\", description=\"Calculates the pre-authorized amount\")\n</code></pre> 5. copy all the file in tools folder to your 'wxo-agents/tools' folder 6. add followings to your 'requirements.txt' <pre><code>TBD\n</code></pre> 7. use below command to import your tools <pre><code>$ orchestrate tools import -k python \\\n    -f \"&lt;path-to-your-tool&gt;/&lt;tool-file-name&gt;.py\" \\\n    -r \"requirements.txt\"\n</code></pre></p>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#creating-knowledge","title":"Creating knowledge","text":"<p>In watsonx Orchestrate, agents can use knowledge bases to search for user requests and return relevant, grounded content or answers.</p> <p>You can create two types of knowledge bases: built-in and external. Built-in knowledge bases are created using a built-in Milvus instance and are populated with documents you import. External knowledge bases refer to your own Milvus or Elasticsearch instances, which you can connect to watsonx Orchestrate for use by agents.</p> <p>In this lab we are going to build in-built knowledge base.</p> <p>Steps - </p> <ol> <li>copy pdf files from lab documents to wxo-agents/knowledge_base/documents</li> <li>create medibuddy_claim_process.yaml file and add following  <pre><code>spec_version: v1\nkind: knowledge_base \nname: medibuddy_claim_process\ndescription: This knowledge addresses the claim process for Medibuddy insurance.\ndocuments:\n  - documents/medibuddy_guidelines.pdf\n</code></pre></li> <li>create users_insurance_policy.yaml file and add following  <pre><code>spec_version: v1\nkind: knowledge_base \nname: insurance_policy_details\ndescription: This knowledge addresses the user's insurance policy details.\ndocuments:\n  - documents/Comprehensive_health_policy.pdf\n</code></pre></li> <li>Import both the knowledge-base using below command <pre><code>orchestrate knowledge-bases import -f &lt;knowledge-base-file-path&gt;\n</code></pre></li> </ol>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#creating-agents","title":"Creating agents","text":"<p>With the ADK, you can create native agents, external agents, and external watsonx Assistants agents. Each of these agent types requires its own set of configurations.</p> <p>In this lab, we will build and import native agents of each type listed below, and then import the remaining agents..</p> <p>We are having two types of native agents in our use case. 1. Agents using knowledge_base 2. Agents using tools </p> <p>Steps -</p> <ol> <li>Create native agents with knowledge_base - create policy_support_agent.yaml file and add below content <pre><code>spec_version: v1\nkind: native\nname: policy_support_agent\ndescription: This agent provides answers to the frequently asked questions related policy claim process, network hospitals and any other information related to the users insurance policy.\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\nstyle: react\ninstructions: &gt;\n  You are a QnA agent. Your task is to answer the questions related to the users insurance policy. \n  You can use the knowledge base to answer the questions. \n  If you are not sure about the answer, please ask for clarification do not provide a generic response.\n  You can also ask for more information if needed.\n  You can also provide links to the relevant documents in the knowledge base.\n  Don't make up answers.\n\n  Transfer to supervisor is must\n\nknowledge_base:\n  - insurance_policy_details\n</code></pre></li> <li>Create native agents with tools - create claim_adjudication_agent.yaml and below content <pre><code>spec_version: v1\nstyle: default\nname: claim_adjudication_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  your primary goal is to calculate pre-authorized amount based on the information collected and received.\n\n  you are an agent responsible for claims adjudication, you use your decision-making capability to evaluate, validate, and settle claims.\n  The goal is to balance fair payouts to policyholders while protecting the insurer from unjustified losses. \n  Efficient adjudication improves customer satisfaction and operational accuracy.\n\n  your primary goal is to calculate pre-authorized amount based on the information collected and received.\n\ninstructions: &gt;\n\n  Condition: Transfer from claim_analyst_agent\n    Action:\n      1. Use read_email tool to read the email and get the required information\n      2. Use get_network_hospitals to get the hospital_tier hospital mentioned in email sent from hospital\n      3. Use get_policy_info tool to get the information about policy using customer id passed by user. remove '%' from co payment before passing to calculate_preauth_amount tool.\n      4. Must call calculate_preauth_amount tool  to calculate the pre-authorized amount\n      5. Prepare a summary based on all above information\n      6. Transfer to supervisor:\n         \"observation: send report to customer's email.\"\n\n\ntools:\n  - calculate_preauth_amount\n  - read_email\n  - get_network_hospitals\n  - get_policy_info\n</code></pre></li> <li> <p>copy all the .yaml file from lab_file/agents to wxo-agents/agents</p> </li> <li> <p>Importing the agents - use below commands to import the agents</p> </li> </ol> <pre><code>orchestrate agents import -f &lt;path to .yaml/.json/.py file&gt;\n</code></pre>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#test-the-use-case","title":"Test the use case","text":""},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#front-desk-agent","title":"Front desk agent","text":"<p>Select 'claim_support_desk_agent' from agents menu on left hand-side.</p> <p>Use below script to test the front desk agent  <pre><code>- What is covered under in-patient treatment in this policy?\n- What are the exclusions for domiciliary treatment?\n- I want initiate a claim process\n</code></pre> if prompted for customer id and aadhar. Enter below  <pre><code>my customer id is CUST001 and aadhar is 1234-5678-9012\n</code></pre></p>"},{"location":"lab-guides/pro-code/insurance-claim-post-hospitalization-guide/#claim-analyst-agent","title":"Claim analyst agent","text":"<p>Select 'claim_analyst_agent' from agents menu on left hand-side.</p> <p>Use below message to trigger the agent  <pre><code>- Calculate pre-authorization amount for customer CUST001\n</code></pre></p>"},{"location":"labs/low-code-lab/","title":"Lab 1 - watsonx Orchestrate Agent Builder (low-code)","text":""},{"location":"labs/low-code-lab/#pick-a-use-case","title":"Pick a use case","text":"Domain Use case Description Instructions Automobile Vehicle Maintenance The Vehicle Maintenance Assistant is an AI Agent designed to help car owners identify and understand vehicle issues by interpreting natural language inputs like \u201cMy car is shaking\u201d or \u201cCheck engine light is on.\u201d It combines real-time telematics data, diagnostic trouble codes (DTCs), and vehicle documentation to offer personalized, accurate diagnostics and actionable guidance such as finding nearby service centers, etc. Get started \u27a1\ufe0f CHRO HR use case One of the main challenges faced by any big organization is their HR operations management. As companies grow in size, it becomes increasingly difficult to get information faster and execute tasks with ease. With the advent of Agentic systems, and the power or reasoning models, it becomes easier to have a single entry point for doing mostly every HR operation. Get started \u27a1\ufe0f"},{"location":"labs/pro-code-lab/","title":"Lab 2 - watsonx Orchestrate Multi-agent (pro-code)","text":""},{"location":"labs/pro-code-lab/#pick-a-use-case","title":"Pick a use case","text":"Domain Use case Description Instructions Insurance Pre authorization for cashless hospitalization description here... Get started \u27a1\ufe0f Insurance Post hospitalization claim description here... Get started \u27a1\ufe0f BFSI Financial research and analysis A smart assistant designed to support financial advisors across their client engagement lifecycle. It autonomously generates personalized investment reports, summarizes meeting outcomes, drafts follow-up communications, and delivers real-time market and financial insights. Get started \u27a1\ufe0f Retail Supply chain description here... Get started \u27a1\ufe0f"},{"location":"labs/environment-setup-lab/access-env/","title":"Lab 0 - Environment setup: Access your classic instance","text":"<p>Note</p> <p>Follow these instructions for accessing your instance of the class environment in order to successfully complete the Agentic AI Bootcamp.</p> <p>When you are invited to the class environment, you'll receive an email. This message is from IBM Technology Zone noreply@techzone.ibm.com inviting you to join the account where your class environment is located.</p> <p>In the email, look for the link in the sentence \"Please go HERE to accept your invitation.\" (Highlighted in the screenshot below.)</p> <p></p> <p>Info</p> <p>If you miss the email or don't receive it for any reason!</p> <p>You can find the invitation on your IBM Cloud account: https://cloud.ibm.com/notifications?type=account</p> <p>Please select the Join Now link.</p> <p></p>"},{"location":"labs/environment-setup-lab/api_key_project_id_setup/","title":"Lab 0 - Environment setup: Create your API key","text":""},{"location":"labs/environment-setup-lab/api_key_project_id_setup/#prerequisite-steps","title":"Prerequisite Steps","text":"<ol> <li> <p>Log in to your Watsonx AI account. Once logged in, you will land on the homepage. </p> </li> <li> <p>Click on the \"+\" icon to create a new project. </p> </li> <li> <p>Enter a name for your project.  </p> </li> <li>Select a storage option from the available choices.  </li> <li> <p>Click \"Create\" to finalize the setup. </p> <p>Well done!</p> <p>Your new project is now ready to use! </p> </li> <li> <p>Click on the hamburger menu (\u2630) in the top-left corner and select \"Access (IAM)\". </p> </li> <li> <p>In the left-hand menu, click on \"API Keys\". </p> </li> <li> <p>Click \"Create\" to generate a new API key. </p> </li> <li> <p>Enter a name for your API key and click \"Create\". </p> </li> <li> <p>Copy your API key and save it in a secure location. You will need it in later steps. </p> </li> </ol>"},{"location":"labs/environment-setup-lab/api_key_project_id_setup/#steps-to-access-project-id","title":"Steps to Access Project ID","text":"<ol> <li> <p>Click on the hamburger menu (three horizontal lines) located at the top-left corner of the screen, You will see view all project options under Project section.    </p> </li> <li> <p>Now you will be redirected to list of Projects, find and click on the project you want to work with.     </p> </li> <li> <p>Once inside the project view, click on the \"Manage Options\" button.</p> </li> <li> <p>After clicking \"Manage Options\", the Project ID will be displayed copy Project ID for further use.    </p> </li> </ol> <p>Well done!</p> <p>Now that we have created both the Project ID and the API Key, we will proceed with the creation of our agents.</p>"},{"location":"labs/environment-setup-lab/create-ibmid/","title":"Lab 0 - Environment setup: Create your IBMid","text":"<p>Note</p> <ul> <li>Follow these brief instructions to create an IBMID. These are specifically for our Business Partners and clients who may not have access to a TechZone environment previously. IBM employees do not need to register.</li> <li>Clients and Business Partners MUST have an IBMID BEFORE you invite them to the workshop environments. They will NOT receive email inviting them to the workshop account unless they already have an IBMID.</li> </ul> <ol> <li>Start by accessing the IBMid Registration Page</li> <li>Enter the required information in the fields provided, such as Email address, name, company, and country.</li> </ol> <p>Important</p> <p>Your email address becomes your IBMid, which you will use to access the bootcamp environment!</p> <p></p> <ol> <li>Click the Next button. You will receive an email containing a one-time verification code.</li> <li>In the\u00a0Verification field, enter the code that is provided in the email.</li> <li>Click\u00a0Create account.</li> <li>An email will be sent indicating that your IBMid account creation was successful and your account is now activated.</li> </ol>"},{"location":"labs/environment-setup-lab/create-project/","title":"Lab 0 - Environment setup: Setup your first project in watsonx.ai","text":"<p>Before starting the first technical lab, we will be walking through how to create your own project to get familiar with watsonx.ai and ensure you have access to your environment for the bootcamp.</p> <p>It is important we create a project in the right environment, or else it will cause issues down the line!</p>"},{"location":"labs/environment-setup-lab/create-project/#1-log-into-watsonx","title":"1. Log into watsonx","text":"<p>Follow this link to log into watsonx: https://dataplatform.cloud.ibm.com/wx/home?context=wx</p> <p>Info</p> <p>Please accept the Terms &amp; Conditions!</p>"},{"location":"labs/environment-setup-lab/create-project/#2-check-that-you-are-in-the-right-instance","title":"2. Check that you are in the right instance","text":"<p>You should now be taken to the watsonx home screen. Check at the top right that you are in the right instance. If it does not show the right name of the instance, you can select it in the drop-down. For the entirety of the bootcamp, you will be working in that same instance!</p> <p>If you do not know your instance, go to your techzone reservations list https://techzone.ibm.com/my/reservations. Look for your recently created reservation and click on \"Open this environment\". Scroll down and look for a reservation name that looks similar to this:  ITZ-WATSONX-21.</p> <p>Note: The instance at the top right tends to change to your default personal account every time you switch/go back to a new page. Thus, it's always good to check the top right corner every time you switch to a new page.</p> <p></p>"},{"location":"labs/environment-setup-lab/create-project/#3-create-a-new-project","title":"3. Create a new project","text":"<p>Now, we can go ahead and create a new project. </p> <p>In the Projects section, click the \"+\" symbol to create a new project.</p> <p>Or, use the link here to trigger a New Project creation.</p> <p></p> <p>Enter a unique name for your project, include both your first and last name and any other information you would like.</p> <p></p>"},{"location":"labs/environment-setup-lab/create-project/#cloud-object-storage-cos","title":"Cloud Object Storage (COS)","text":"<p>It is likely there is also already a Cloud Object Storage instance selected for you, with a name that starts with \"itzcos-...\" If so, you don't have to do anything! </p> <p>Otherwise, you may be prompted to select from multiple instances. Please consult with your bootcamp lead which COS instance to select.</p> <p></p>"},{"location":"labs/environment-setup-lab/create-project/#click-create","title":"Click Create","text":"<p>Now, click Create. It may take a few seconds to officially be created.</p>"},{"location":"labs/environment-setup-lab/create-project/#4-associate-the-correct-runtime-instance","title":"4. Associate the correct runtime instance","text":"<p>With the project created, you should be directed to the project home page. Select the \"Manage\" tab.</p> <p>Click on \"Services and Integrations\" in the left sidebar. Then, click on \"Associate service.\"</p> <p></p> <p>Select the service listed with \"Type\" = \"watsonx.ai Runtime\" and click Associate. </p> <p></p> <p>Note: If you can't find the service, remove all filters from the \"Locations\" dropdown. If you see 2+ Watson Machine Learning services, select the one where \"Group\" = the same environment name of the instance. The environment name can be found on https://techzone.ibm.com/my/reservations. </p> <p></p> <p>Time to get started with your first use case!</p>"},{"location":"labs/environment-setup-lab/pre-requisites/","title":"Lab 0 - Environment setup: Pre-requisites","text":"<p>Info</p> <p>All participants must follow the pre-requisite steps to reserve TechZone watsonx Orchestrate environment.</p> <p>For this bootcamp, we have created the Agentic AI Bootcamp TechZone bundle, which has all the components needed for the hands-on labs, including:</p> <ul> <li>watsonx.ai</li> <li>Cloud Object Storage (COS) &amp; watsonx.ai Runtime (formerly WML)</li> <li>watsonx Orchestrate</li> <li>IBM CodeEngine</li> <li>Container Registry</li> <li>watsonx.governance (for the demo)</li> </ul>"},{"location":"labs/environment-setup-lab/pre-requisites/#getting-started","title":"Getting started:","text":"<ol> <li>Create your IBMid</li> <li>Access your class instance</li> <li>Setup your first project</li> <li>Create your API key</li> <li>wxO client setup</li> </ol>"},{"location":"labs/environment-setup-lab/wxo-client-setup/","title":"Lab 0 - Environment setup: running wxo-client adk locally","text":"<p>Note</p> <p>Follow these instructions for running wxo-client ADK locally in order to successfully complete the Agentic AI pro-code bootcamp labs.</p>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#installing-the-adk","title":"Installing the ADK","text":"<p>Install the IBM watsonx Orchestrate ADK on your computer. \u200b</p>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#installation-prerequisites","title":"Installation prerequisites","text":"<ul> <li> <p>Install the required software to enable the ADK installation:</p> <ul> <li>Python: The programming language that the ADK is written in. The ADK requires at least Python 3.11, and the latest compatible version is Python 3.13. For more information, see Python.</li> <li>Pip: Pip is Python\u2019s package manager. In some operating systems, it\u2019s included with Python\u2019s installation. For more information, see Pip.</li> </ul> </li> <li> <p>Optional: Create a virtual environment with venv to install the ADK. For more information, see venv --- Creation of virtual environments.</p> </li> </ul>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#installing-the-adk_1","title":"Installing the ADK","text":"<ul> <li>Install the ADK with pip.</li> </ul> <pre><code>pip install ibm-watsonx-orchestrate\n</code></pre> <ul> <li>Test the installation:</li> </ul> <pre><code>orchestrate --help\n</code></pre> <p>!!! Note: Use the --help argument to get information about each command and its arguments in the ADK CLI.</p>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#enabling-the-bootcamp-environment","title":"Enabling the Bootcamp Environment","text":"<pre><code>orchestrate env add --name bootcamp --url &lt;REPLACE_WITH_WXO_INSTANCE_URL&gt; -t ibm_iam\norchestrate env activate bootcamp\n</code></pre>"},{"location":"use-cases-for-labs/low-code/hr-use-case/","title":"HR use case","text":"<p>Note</p> <p>CE lab link: https://github.ibm.com/skol/agentic-ai-client-bootcamp/tree/staging/usecases/ask-hr</p>"},{"location":"use-cases-for-labs/low-code/hr-use-case/#deploy-the-tools","title":"Deploy the tools","text":""},{"location":"use-cases-for-labs/low-code/hr-use-case/#build-on-ui","title":"Build on UI","text":""},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/","title":"Vehicle Maintenance use case","text":""},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/#overview","title":"Overview","text":"<p>The Vehicle Troubleshooting Assistant is an AI Agent designed to help car owners identify and understand vehicle issues by interpreting natural language inputs like \u201cMy car is shaking\u201d or \u201cCheck engine light is on.\u201d It combines real-time telematics data, diagnostic trouble codes (DTCs), and vehicle documentation to offer personalized, accurate diagnostics and actionable guidance such as finding nearby service centers, etc.</p>"},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/#reference-architecture","title":"Reference Architecture","text":""},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/#key-components","title":"Key Components","text":"<ul> <li>Telematics data analyzer agent (External Agent) \u2013 Get the car telematics data and analyze it to provide a natural language summary</li> <li>Get Telematics data (Tool) \u2013 Get the telematics data of a car. (simulation)</li> <li>Get nearest service center (Tool) \u2013 Get the nearest service center. (takes lat &amp; lon and gives results)</li> <li>Troubleshoot agent (Native wxO Agent) \u2013 A supervisor agent that orchestrate between the following:<ol> <li>Knowledge (RAG):     a. DTC code list.pdf     b. Car user manual.pdf</li> <li>Toolset:     a. Agents:         i. Telematics data analyzer agent     b. Tools:         i. Get nearest service center</li> </ol> </li> </ul>"},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/#benefits","title":"Benefits","text":"<ul> <li>Customer Experience: Reduces stress for drivers by providing instant, understandable insights.</li> <li>Service Optimization: Reduces unnecessary service visits and helps service centers prioritize real issues.</li> <li>Brand Loyalty: Builds trust by offering proactive, intelligent support post-purchase.</li> <li>Data Utilization: Leverages telematics data and DTC documentation to deliver accurate, data-driven support.</li> <li>Scalability: Easily extendable across vehicle models, regions, and support channels (mobile app, web, IVR).</li> </ul>"},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/#deploy-the-tools","title":"Deploy the tools","text":""},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/#build-on-ui","title":"Build on UI","text":""},{"location":"use-cases-for-labs/low-code/vehicle-maintenance/#suggested-script","title":"Suggested script","text":"<ol> <li>\u201cWhat does the engine temperature warning light mean?\u201d -&gt; Troubleshoot agent will use the Knowledge base to RAG and answer this query</li> <li>\u201cHelp me diagnose my car. It is shaking and I have the engine temperature warning light on.\u201d -&gt; Troubleshoot agent will transfer the control to Telematics data analyzer agent which will ask follow-up questions if required and give a car health report. The car report is read, and a suggestion is provided by the Troubleshoot agent.</li> <li>\u201cWhere is the nearest service center?\u201d -&gt; Troubleshoot agent will invoke the Get nearest service center tool and pass the lat &amp; long received from the Telematics data analyzer agent (assumption is that car will send the current lat &amp; long data as part of telematics data.) and get the nearest service centers from the list of service centers.</li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post-hospitalization/","title":"Health Insurance - Post Hospitalization Claim","text":"<p>This LAB is written to simulate a customer care agent for hospitals. Healthcare insurance claims involve multiple steps, data sources, and decision points, making it ideal for a multi-agent system.  This scenario covers post hospitalization claim process and more details on the flow are documented below.</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post-hospitalization/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Make sure you've already setup the environment:</li> <li>Lab 0 - Environment setup: Pre-requisites</li> <li>ADK Installation</li> <li>Download files</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post-hospitalization/#steps-to-import","title":"Steps to import","text":"<ol> <li>Sign-up for a Service Now account at https://developer.servicenow.com/dev.do</li> <li>Validate your email address (check email)</li> <li>On the landing page click start building. This will allocate a new instance of SNOW for you. </li> <li>Back on the landing page, click your profile icon on the top right and under \"My instance\" click manage instance password.</li> <li>Create an application connection using these credentials <pre><code>orchestrate connections add -a service-now\norchestrate connections configure -a service-now --env live --type team --kind basic --url &lt;the instance url&gt;\norchestrate connections set-credentials -a service-now --env live -u admin -p &lt;password from modal&gt;\n</code></pre></li> <li>Run the import all script <code>./scripts/import-all.sh</code></li> <li>Go to Manage Agents on your Watsonx Orchestrate Instance and make sure you deploy each imported Agent.</li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post-hospitalization/#test-your-agents","title":"Test your Agents","text":"<p>Demo Video</p> <p>Try with generic query - This should use backend knowledge base for generic health insurance queries</p> <ul> <li>Below query responses should come from \"nsa-health-insurance-basics.pdf\" document</li> </ul> <pre><code>1: Does a Health Plan Typically Pay for Services from Any Doctor?\n2: What are some typically costs that consumers pay when they have insurance ?\n3: Can you please share examples of Health Insurance Cost Sharing ?\n4: Can you share more details on self-insured employer plans vs. fully-insured plans ?\n5: What's Explanation of Benefit (EOB) document ?\n6: Give me an example where the consumer has not paid anything toward the out-of-network deductible.\n</code></pre> <p>Health Insurance Claim process flow</p> <ul> <li>Start a new Chat for the following flow</li> </ul> <pre><code>I need to submit a new claim for a doctor's visit.\n</code></pre> <ul> <li>Agent should ask about memberId and date of birth </li> </ul> <pre><code>My MemberId is MEMBER456 and date of birth is: 1985-07-22\n</code></pre> <ul> <li>After authentication Agent should ask for other details for initiating the claim process</li> <li> <p>User should response one of the below bases on what Agent asks for:</p> </li> <li> <p>If agent asks for name of the patient: <pre><code>Name of the patient is Sarah Johnson\n</code></pre></p> </li> <li> <p>If Agent asks for date of service</p> </li> </ul> <pre><code>Yes, Dr. Emily Carter on October 26th, 2023. And I also had some lab tests done at Quest Diagnostics the same day.\n</code></pre> <ul> <li>If Agent asks for description of the services or charges</li> </ul> <pre><code>I had a chest pain and Dr. Emily did some initial checks but she asked for a few lab tests that I get done by Quest Diagnostics.  Doctor's charges were $50 and Lab test charges were $150.\n</code></pre> <ul> <li>OR at the end just provide all the details that the user can provide from services taken:</li> </ul> <pre><code>Here are all the details:\nSuperbill - Health Clinic Inc.\nPatient: Sarah Johnson (ID: MEMBER456)\nDate of Service: 2023-10-26\nProvider: Dr. Emily Carter, NPI: 1234567890\nService Code (CPT): 99214, Diagnosis (ICD-10): M54.5, Charge: $250.00\nService Code (CPT): 80053 (Lab Panel), Provider: Quest Diagnostics, NPI: 0987654321, Charge: $120.00\n</code></pre>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post-hospitalization/#insurance-claim-full-flow","title":"Insurance Claim Full Flow","text":"<p>Healthcare insurance claims involve multiple steps, data sources, and decision points, making it ideal for a multi-agent system.</p> <p>Here's a scenario: \"Member Sarah submits a claim for a specialist visit and subsequent lab tests.\"</p> <p>We'll define a few agents, each with a specific role and toolset. There will also be a \"Master Orchestrator Agent\" (often implicit or part of the platform) that routes tasks between agents.</p> <p>The Agents &amp; Their Tools:</p> <ol> <li> <p>Frontend Conversational Agent (FCA)</p> <ul> <li>Role: Interacts directly with Sarah (the member) via chat, voice, or a web portal. Gathers initial information, provides updates, and answers basic queries.</li> <li>Tools:<ul> <li>Natural Language Understanding (NLU) &amp; Dialogue Management Engine: To understand Sarah's requests and maintain conversational context.</li> <li>Knowledge Base Access: For FAQs (e.g., \"How do I submit a claim?\", \"What's my deductible?\").</li> <li>Member Authentication API: To verify Sarah's identity.</li> <li>Basic Claim Form Interface: A structured way to collect initial claim details if not purely conversational.</li> </ul> </li> </ul> </li> <li> <p>Claim Intake &amp; Validation Agent (CIVA)</p> <ul> <li>Role: Receives initial claim data from FCA. Validates completeness and basic accuracy of submitted information. Checks for immediate red flags.</li> <li>Tools:<ul> <li>Optical Character Recognition (OCR) Service: If claim documents (e.g., superbill) are uploaded.</li> <li>Data Extraction &amp; Structuring Tools: To pull relevant fields (CPT codes, ICD-10 codes, provider NPI, date of service, costs) from unstructured/semi-structured input.</li> <li>Member Eligibility Verification API: Connects to the core insurance system to confirm Sarah is an active member and eligible for benefits on the date of service.</li> <li>Provider Network API: Checks if the specialist and lab are in-network or out-of-network.</li> <li>Basic Rules Engine: For initial validation checks (e.g., \"Is date of service in the past?\", \"Are cost fields numeric?\").</li> </ul> </li> </ul> </li> <li> <p>Policy &amp; Benefits Adjudication Agent (PBAA)</p> <ul> <li>Role: Takes validated claim information. Determines coverage based on Sarah's specific policy, applies benefits (deductibles, co-pays, coinsurance), and checks for pre-authorization requirements.</li> <li>Tools:<ul> <li>Core Policy Management System API: Accesses detailed policy terms, coverage limits, accumulator status (deductible met, out-of-pocket max).</li> <li>Benefits Engine/Calculator: Applies financial rules based on the policy.</li> <li>Pre-authorization Database API: Checks if the services required pre-authorization and if it was obtained.</li> <li>Medical Necessity &amp; Coding Guidelines Database (e.g., InterQual, MCG, NCD/LCD): For initial cross-referencing of procedure codes against diagnosis codes for appropriateness (can be a lighter check than a dedicated clinical review agent).</li> </ul> </li> </ul> </li> <li> <p>Clinical Review &amp; Fraud Detection Agent (CRFDA) - (Optional, for complex cases or high-value claims)</p> <ul> <li>Role: Performs deeper clinical review for medical necessity, appropriateness of codes, and potential fraud, waste, or abuse. This agent might be triggered if certain thresholds or flags are met.</li> <li>Tools:<ul> <li>Advanced Medical Coding &amp; Billing Edit Software (e.g., ClaimScrubber functionality): Detects un-bundling, up-coding, incorrect modifiers.</li> <li>Predictive Analytics &amp; Machine Learning Models: Trained on historical claim data to identify patterns indicative of fraud or abuse.</li> <li>Clinical Expert System/Knowledge Base: More in-depth medical necessity guidelines and treatment protocols.</li> <li>Case Management System API: To flag claims for human review if AI confidence is low or a significant issue is detected.</li> </ul> </li> </ul> </li> <li> <p>Payment &amp; Communication Agent (PCA)</p> <ul> <li>Role: Processes the finalized claim (approved amount), generates Explanation of Benefits (EOB), and initiates communication to the member and provider.</li> <li>Tools:<ul> <li>Payment Processing Gateway API: To schedule payments to providers or reimbursements to members.</li> <li>Document Generation Service: To create EOBs.</li> <li>Communication Platform API (Email, SMS, Secure Portal Messaging): To send notifications and EOBs.</li> <li>Claim Status Update API: To update the central claim record.</li> </ul> </li> </ul> </li> </ol> <p>Conversational Flow &amp; Multi-Agent Interaction:</p> <p>(Master Orchestrator Agent is implicitly routing tasks based on outcomes)</p> <p>Phase 1: Claim Submission &amp; Initial Validation</p> <ol> <li> <p>Sarah (Member) -&gt; Frontend Conversational Agent (FCA):</p> <ul> <li>Sarah: \"Hi, I need to submit a new claim for a doctor's visit.\"</li> <li>FCA (using NLU): \"Hello Sarah! I can help with that. To start, can you please provide your Member ID and Date of Birth for verification?\"</li> <li>(Sarah provides details)</li> <li>FCA (using Member Authentication API): \"Thank you, you're verified. Was this for a specialist visit?\"</li> <li>Sarah: \"Yes, Dr. Emily Carter on October 26th, 2023. And I also had some lab tests done at Quest Diagnostics the same day.\"</li> <li>FCA (using Claim Form Interface logic &amp; NLU): \"Okay, Dr. Carter on 10/26/2023 and labs at Quest Diagnostics. Do you have the superbill or details of the services and costs? You can type them or upload a document.\"</li> <li>(Sarah uploads a PDF superbill for the specialist and types info for the lab tests)</li> <li>FCA: \"Thanks! I've received the information. I'll pass this along for initial processing. Your reference ID for this submission is CLM12345.\"<ul> <li>FCA sends structured data + PDF to Orchestrator for routing.</li> </ul> </li> </ul> </li> <li> <p>Orchestrator -&gt; Claim Intake &amp; Validation Agent (CIVA):</p> <ul> <li>CIVA (receives data):<ul> <li>(Uses OCR Service on PDF): Extracts Dr. Carter's NPI, CPT codes (e.g., 99214), ICD-10 codes (e.g., M54.5 - Low back pain), charges.</li> <li>(Uses Data Extraction for typed lab info): Extracts Quest NPI, CPT codes (e.g., 80053), charges.</li> <li>(Uses Member Eligibility Verification API): Confirms Sarah's policy was active on 10/26/2023. Result: Active.</li> <li>(Uses Provider Network API): Checks Dr. Carter (NPI) and Quest Diagnostics (NPI). Result: Dr. Carter In-Network, Quest Diagnostics In-Network.</li> <li>(Uses Basic Rules Engine): All mandatory fields present, dates valid. Result: Basic validation passed.</li> <li>CIVA sends validated &amp; structured claim data (now two separate line items: one for specialist, one for lab) to Orchestrator.</li> </ul> </li> </ul> </li> </ol> <p>Phase 2: Adjudication</p> <ol> <li>Orchestrator -&gt; Policy &amp; Benefits Adjudication Agent (PBAA):<ul> <li>PBAA (receives validated claim data for Dr. Carter's visit):<ul> <li>(Uses Core Policy Management System API): Retrieves Sarah's plan details: $500 deductible (status: $200 met), 20% coinsurance for specialist after deductible, $30 copay for labs (deductible waived for labs).</li> <li>(Uses Pre-authorization Database API): Checks if CPT 99214 requires pre-auth for diagnosis M54.5. Result: No pre-auth required.</li> <li>(Uses Benefits Engine):<ul> <li>Specialist charge: $250.</li> <li>Remaining deductible: $500 - $200 = $300.</li> <li>Amount applied to deductible: $250 (since charge &lt; remaining deductible).</li> <li>Patient responsibility for specialist: $250 (goes to deductible).</li> <li>Insurance Payout for specialist: $0.</li> <li>Deductible now met: $200 + $250 = $450.</li> </ul> </li> </ul> </li> <li>PBAA (receives validated claim data for Quest Labs):<ul> <li>(Uses Core Policy Management System API): Confirms lab benefits.</li> <li>(Uses Pre-authorization Database API): Checks if CPT 80053 requires pre-auth. Result: No pre-auth required.</li> <li>(Uses Benefits Engine):<ul> <li>Lab charge: $120.</li> <li>Copay: $30.</li> <li>Patient responsibility for labs: $30.</li> <li>Insurance Payout for labs: $120 (allowed) - $30 (copay) = $90.</li> </ul> </li> <li>PBAA flags that the claim is relatively straightforward and doesn't meet thresholds for CRFDA. Sends adjudicated claim data (member responsibility, insurance payout for each line) to Orchestrator.</li> </ul> </li> </ul> </li> </ol> <p>Phase 3: Finalization &amp; Communication</p> <ol> <li> <p>Orchestrator -&gt; Payment &amp; Communication Agent (PCA):</p> <ul> <li>PCA (receives adjudicated claim data):<ul> <li>(Uses Document Generation Service): Creates EOB for Sarah detailing:<ul> <li>Dr. Carter: $250 charged, $250 applied to deductible, $0 paid by insurance.</li> <li>Quest Labs: $120 charged, $30 member copay, $90 paid by insurance.</li> <li>Updated deductible status: $450 met of $500.</li> </ul> </li> <li>(Uses Payment Processing Gateway API): Schedules $90 payment to Quest Diagnostics.</li> <li>(Uses Communication Platform API): Sends email to Sarah: \"Your claim CLM12345 has been processed. Your EOB is available in your secure portal. Click here to view.\" Also sends notification to secure portal.</li> <li>(Uses Claim Status Update API): Marks claim CLM12345 as \"Processed.\"</li> <li>PCA notifies Orchestrator of completion.</li> </ul> </li> </ul> </li> <li> <p>Orchestrator -&gt; Frontend Conversational Agent (FCA) (Optional update):</p> <ul> <li>(If Sarah is still in an active chat or checks back)</li> <li>FCA: \"Good news, Sarah! Your claim CLM12345 has been processed. You can find the Explanation of Benefits in your secure member portal. For the specialist visit, $250 was applied to your deductible. For the lab tests, your copay is $30, and we've paid $90 to Quest Diagnostics.\"</li> </ul> </li> </ol> <p>If CRFDA Agent was Involved (Example):</p> <p>Suppose the specialist claim was for a very expensive, unusual procedure. *   PBAA would flag it after initial benefit check and send it to Orchestrator. *   Orchestrator -&gt; Clinical Review &amp; Fraud Detection Agent (CRFDA):     *   CRFDA:         *   (Uses Advanced Medical Coding &amp; Billing Edit Software): Checks for bundling, modifier accuracy. Result: Codes appear correct.         *   (Uses Predictive Analytics &amp; ML Models): Assesses fraud risk. Result: Low risk.         *   (Uses Clinical Expert System): Verifies medical necessity for the procedure against diagnosis. Result: Consistent with guidelines for M54.5 after conservative treatment failure (assuming this info was also gathered or inferred).         *   CRFDA sends \"Approved from clinical standpoint\" back to Orchestrator, who then routes it back to PBAA to finalize financial adjudication if not already done, or directly to PCA.</p> <p>Key Benefits of this Agentic Approach:</p> <ol> <li>Specialization: Each agent focuses on what it does best with its specific tools.</li> <li>Scalability: Individual agents can be scaled independently based on load.</li> <li>Maintainability: Easier to update or replace one agent's tools or logic without affecting the entire system.</li> <li>Flexibility: New agents (e.g., a \"Prior Authorization Specialist Agent\") can be added to the workflow.</li> <li>Efficiency: Parallel processing can occur (e.g., CIVA validating two parts of a claim simultaneously).</li> <li>Improved User Experience: The FCA provides a single, intelligent point of contact, shielding the user from complex backend processes.</li> </ol> <p>This multi-agent system allows for a sophisticated, automated, yet adaptable claims processing workflow.</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/","title":"Pre authorization for cashless hospitalization","text":"<p>This use case demonstrates the deployment of AI Agents to enhance the cashless hospitalization experience by streamlining both customer interaction and backend claim processing.</p> <p>At the hospital front desk, an AI-powered virtual agent acts as the first point of contact, delivering efficient and personalized support for insurance-related queries. It provides human-like responses, helping customers understand their policy coverage and guiding them seamlessly through the claim initiation process.</p> <p>Simultaneously, a background AI claim analyst agent is triggered to proactively evaluate the claim, verify policy entitlements, and calculate the pre-authorized amount based on policy rules and treatment details. Once reviewed, it automatically notifies the customer via email with the approval status and next steps.</p> <p>In certain scenarios, this claim analyst agent can also be manually triggered by a TPA desk agent</p> <p>Here's your Problem Statement rewritten in clean and structured Markdown format:</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#the-problem","title":"\ud83e\uddfe The Problem","text":"<p>The traditional cashless hospitalization process in insurance involves multiple manual steps or traditional assistant flow\u2014including front desk coordination, claim intake, document validation, and pre-authorization. These manual processes are:</p> <ul> <li>\u23f1\ufe0f Time-consuming</li> <li>\u26a0\ufe0f Prone to human error</li> <li>\ud83c\udfe5 Delay critical treatment</li> <li>\ud83d\ude1f Cause poor customer experience</li> </ul> <p>As a result, hospitals, insurers, and patients face significant friction due to:</p> <ul> <li>\ud83d\udd01 Inefficient coordination between hospital front desk staff and insurance providers</li> <li>\ud83d\udcc4 Manual verification of patient policy eligibility and supporting documents</li> <li>\u231b Delayed pre-authorization approvals caused by backlogs and manual checks</li> <li>\ud83d\udcb8 High operational costs from repetitive, rule-based tasks performed by human agents</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#as-is-architecture","title":"As-Is Architecture","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#objective","title":"\ud83c\udfaf Objective","text":"<p>The objective is to design an Agentic AI solution that automates and streamlines the end-to-end cashless hospitalization claim process, delivering faster turnaround, improved customer experience, and operational efficiency.</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#key-highlights","title":"\u2705 Key Highlights","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#1-front-desk-ai-agent-for-customer-support-collaboration","title":"\ud83e\udd16 1. Front Desk AI Agent for Customer Support &amp; Collaboration","text":"<ul> <li>Deploy an AI-powered Front Desk Agent to serve as the primary interface to the customer.</li> <li>This agent delivers human-like, real-time support for customer queries related to policy details, claim process, and documentation.</li> <li>It actively collaborates with other specialized AI agents, such as those responsible for claim intake and document verification, to ensure a smooth and accurate initiation of the claim process.</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#2-claim-analyst-ai-agent-for-proactive-claim-processing","title":"\ud83e\udd16 2. Claim Analyst AI Agent for Proactive Claim Processing","text":"<ul> <li>Implement a Claim Analyst AI Agent that works proactively in the background.</li> <li> <p>This agent collaborates with claim adjudication and report agents to:</p> <ul> <li>Calculate the pre-authorized claim amount</li> <li>Generate a detailed report</li> <li>Once processed, it automatically notifies the customer via email, ensuring transparency and speed.</li> </ul> </li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#3-intelligent-access-to-enterprise-systems","title":"\ud83d\udee0\ufe0f 3. Intelligent Access to Enterprise Systems","text":"<ul> <li>Provide AI agents with secure and intelligent access to relevant enterprise systems and data repositories.</li> <li>Enables agents to fetch contextual information in real time, supporting more accurate decision-making and faster response times.</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#business-values","title":"\ud83d\ude80 Business values","text":"<ol> <li>Faster, smoother interactions boost first-contact resolution and customer trust.</li> <li>Resolving multiple issues in one chat cuts handling time and costs.</li> <li>Accurate, complete responses reduce errors and improve satisfaction.</li> <li>Easy-to-understand insurance/claims info improves customer experience.</li> <li>Location-based help (hospitals/doctors) adds convenience and empathy.</li> <li>Auto pre-authorization speeds up approvals and reduces manual work.</li> <li>No more manual document uploads means fewer frustrations and faster claims.</li> </ol> <p>## To-Be Architecture</p> <p></p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#ai-agents-working-model","title":"AI Agents working model","text":"<p>The diagram below demonstrates the AI agent's reasoning capabilities in processing insurance claims for pre-authorization amount</p> <p></p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#step-by-step-hands-on-instructions","title":"Step-by-step Hands-on Instructions","text":"<p>You can find step-by-step instructions in this document. It shows how you can implement the use case using watsonx.ai and watsonx Orchestrate.</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-pre-authorization/#demo-video","title":"Demo video","text":"<p>ICP_Pre_Hosp_Demo.mp4</p>"}]}