{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agentic AI Bootcamp","text":"<p>In this Agentic AI Bootcamp, you will build and deploy Agentic AI application prototypes for enterprise use cases.</p>"},{"location":"#agenda","title":"AGENDA","text":"<p>You will learn about:</p> <p>\ud83d\ude80 AI Agents and evolving market landscape</p> <p>\ud83d\ude80 IBM's Vision for Agentic AI</p> <p>\ud83d\ude80 IBM's Agenitc AI Solutions and Offerings</p> <p>\ud83d\ude80 You'll leverage IBM watsonx and open source tools for low-code fast prototyping of Agentic AI workflows.</p> <p>\ud83d\ude80 You'll learn how to deploy an Agentic AI application and the trust considerations needed to go to production.</p>"},{"location":"conclusion/","title":"Conclusion","text":"<p>Thank you for taking the IBM Agentic AI Bootcamp!</p>"},{"location":"conclusion/#next-steps","title":"Next steps","text":"<ul> <li>Bring your own use cases and QnA.</li> <li>Discover and try IBM's AI portfolio across IBM watsonx through Digital Self-Service Co-Create Experience on: dsce.ibm.com</li> <li>Connect with us to co-create a Pilot in 4-5 weeks.</li> </ul>"},{"location":"show-and-tell/","title":"Show and tell","text":""},{"location":"show-and-tell/#goal-of-the-bootcamp","title":"Goal of the bootcamp","text":"<ul> <li>Show value of IBM (Agentic AI) technology</li> <li>Get partners excited with a tangible outcome and learning experience</li> <li>Discover the use case, identify the opportunities &amp; pilots</li> <li>Badges</li> </ul>"},{"location":"show-and-tell/#targeted-audience","title":"Targeted audience","text":"<ul> <li>Partners interested in leveraging Agentic AI</li> </ul>"},{"location":"show-and-tell/#topics-covered","title":"Topics covered","text":"<ul> <li> <p>Agentic AI Governance</p> </li> <li> <p>watsonx Orchestrate\u00a0platform walkthrough</p> </li> <li> <p>watsonx Assistant Builder</p> </li> <li> <p>watsonx Orchestrate Agent Builder</p> </li> <li> <p>Multi-Agent Industry demos</p> </li> </ul>"},{"location":"demo-use-cases/governance-demo/","title":"Governing Agentic AI in Clinical Trials with watsonx.governance","text":""},{"location":"demo-use-cases/governance-demo/#description","title":"Description","text":"<p>IBM's watsonx.governance plays a crucial role in governing clinical drug trial use cases, particularly when employing Agentic AI. This system helps manage risks and ensure compliance with regulations like HIPAA and the EU AI Act. </p> <p>Agentic AI introduces new risks, including: - Human manipulation - Cascading hallucinations - Difficulty in maintaining traceability and accountability</p> <p>watsonx.governance offers a platform to identify, document, and mitigate these risks throughout the life cycle of agents and tools. It measures essential metrics like: - Faithfulness - Context relevance</p> <p>These measurements help ensure that generated responses adhere to company guidelines and ethical standards.</p>"},{"location":"demo-use-cases/governance-demo/#watch-the-demo","title":"\ud83c\udfa5 Watch the Demo","text":"<p>\ud83d\udc49 Click on this link to watch the complete demo</p>"},{"location":"demo-use-cases/hashi-demo/","title":"HashiCorp Vault Demo","text":""},{"location":"demo-use-cases/hashi-demo/#coming-soon","title":"Coming soon!","text":""},{"location":"demo-use-cases/maximo-workorder-maintenance-demo/","title":"Maximo Agentic Solution: AI-Driven Work Order Optimization","text":""},{"location":"demo-use-cases/maximo-workorder-maintenance-demo/#description","title":"Description","text":"<p>IBM's Maximo Agentic Solution integrates intelligent AI agents with IBM Maximo to automate and optimize key maintenance workflows. This solution empowers asset-intensive industries with smarter, more efficient operations by embedding autonomous decision-making into core maintenance processes.</p> <p>The solution features three specialized agents:</p> <ul> <li> <p>Weather Agent   Automatically checks weather conditions based on the work order's location and schedules or delays work accordingly\u2014ensuring field activities are planned under favorable conditions.</p> </li> <li> <p>Inventory Agent   Analyzes the work order description, identifies the required materials, checks inventory availability, and updates the work order with the necessary items\u2014minimizing delays and manual tracking.</p> </li> <li> <p>Labor Agent   Determines the skill or craft needed for the task, verifies qualified labor availability, and assigns them to the work order\u2014reducing scheduling overhead and ensuring the right personnel are deployed.</p> </li> </ul> <p>Together, these agents streamline the end-to-end work order process\u2014reducing manual effort, minimizing errors, and enabling intelligent, context-aware decision-making within Maximo.</p>"},{"location":"demo-use-cases/maximo-workorder-maintenance-demo/#watch-the-demo","title":"\ud83c\udfa5 Watch the Demo","text":"<p>\ud83d\udc49 Click on this link to watch the complete demo</p>"},{"location":"demo-use-cases/travel-planner-demo/","title":"Travel planner assistant","text":""},{"location":"demo-use-cases/travel-planner-demo/#description","title":"Description","text":"<p>An agent that helps users plan trips by gathering information about destinations, predicting weather conditions, and recommending activities based on real-time data.</p>"},{"location":"demo-use-cases/travel-planner-demo/#watch-the-demo","title":"\ud83c\udfa5 Watch the Demo","text":"<p>\ud83d\udc49 Interactive Live demo on DSCE</p>"},{"location":"labs/env-setup-lab/","title":"Lab 0 - Environment setup","text":"<p>Info</p> <p>All participants must follow the pre-requisite steps to reserve TechZone watsonx Orchestrate environment.</p> <p>For this bootcamp, we have created the Agentic AI Bootcamp TechZone bundle, which has all the components needed for the hands-on labs, including:</p> <ul> <li>watsonx.ai</li> <li>Cloud Object Storage (COS) &amp; watsonx.ai Runtime (formerly WML)</li> <li>watsonx Orchestrate</li> <li>IBM CodeEngine</li> <li>Container Registry</li> <li>watsonx.governance (for the demo)</li> </ul> <p>Reserve any of the following instance to get started.</p> <p></p> <p>Important Note!</p> <p>Incase you don't have access to the TechZone you most likely don't have and IBM ID. Create an IBM ID by following the instructions here: Create your IBMid</p>"},{"location":"labs/env-setup-lab/#next-step","title":"Next step","text":"<ul> <li>Setup watsonx Orchestrate Agent Development Kit (ADK)</li> </ul>"},{"location":"labs/low-code-lab/","title":"Lab 1 - watsonx Orchestrate Agent Builder (low-code)","text":""},{"location":"labs/low-code-lab/#pick-a-use-case","title":"Pick a use case","text":"Domain Use case Description Instructions Automobile Vehicle Maintenance The Vehicle Maintenance Assistant is an AI Agent designed to help car owners identify and understand vehicle issues by interpreting natural language inputs like \u201cMy car is shaking\u201d or \u201cCheck engine light is on.\u201d It combines real-time telematics data, diagnostic trouble codes (DTCs), and vehicle documentation to offer personalized, accurate diagnostics and actionable guidance such as finding nearby service centers, etc. Get started \u27a1\ufe0f CHRO HR use case One of the main challenges faced by any big organization is their HR operations management. As companies grow in size, it becomes increasingly difficult to get information faster and execute tasks with ease. With the advent of Agentic systems, and the power or reasoning models, it becomes easier to have a single entry point for doing mostly every HR operation. Get started \u27a1\ufe0f"},{"location":"labs/pro-code-lab/","title":"Lab 2 - watsonx Orchestrate Multi-agent (pro-code)","text":""},{"location":"labs/pro-code-lab/#pick-a-use-case","title":"Pick a use case","text":"Domain Use case Description Instructions Insurance Pre authorization for cashless hospitalization This use case demonstrates the deployment of AI Agents to enhance the cashless hospitalization experience by streamlining both customer interaction and backend claim processing. Get started \u27a1\ufe0f Insurance Post hospitalization claim Healthcare insurance claims involve multiple steps, data sources, and decision points, making it ideal for a multi-agent system. Here's a scenario: \"Member Sarah submits a claim for a specialist visit and subsequent lab tests.\" We'll define a few agents, each with a specific role and toolset. There will also be a \"Master Orchestrator Agent\" (often implicit or part of the platform) that routes tasks between agents. Get started \u27a1\ufe0f BFSI Financial research and analysis A smart assistant designed to support financial advisors across their client engagement lifecycle. It autonomously generates personalized investment reports, summarizes meeting outcomes, drafts follow-up communications, and delivers real-time market and financial insights. Get started \u27a1\ufe0f Retail Supply chain coming soon Get started \u27a1\ufe0f"},{"location":"labs/environment-setup-lab/access-env/","title":"Lab 0 - Environment setup: Access your classic instance","text":"<p>Note</p> <p>Follow these instructions for accessing your instance of the class environment in order to successfully complete the Agentic AI Bootcamp.</p> <p>When you are invited to the class environment, you'll receive an email. This message is from IBM Technology Zone noreply@techzone.ibm.com inviting you to join the account where your class environment is located.</p> <p>In the email, look for the link in the sentence \"Please go HERE to accept your invitation.\" (Highlighted in the screenshot below.)</p> <p></p> <p>Info</p> <p>If you miss the email or don't receive it for any reason!</p> <p>You can find the invitation on your IBM Cloud account: https://cloud.ibm.com/notifications?type=account</p> <p>Please select the Join Now link.</p> <p></p>"},{"location":"labs/environment-setup-lab/api_key_project_id_setup/","title":"Lab 0 - Environment setup: Create your API key","text":""},{"location":"labs/environment-setup-lab/api_key_project_id_setup/#prerequisite-steps","title":"Prerequisite Steps","text":"<ol> <li> <p>Log in to your Watsonx AI account. Once logged in, you will land on the homepage. </p> </li> <li> <p>Click on the \"+\" icon to create a new project. </p> </li> <li> <p>Enter a name for your project.  </p> </li> <li>Select a storage option from the available choices.  </li> <li> <p>Click \"Create\" to finalize the setup. </p> <p>Well done!</p> <p>Your new project is now ready to use! </p> </li> <li> <p>Click on the hamburger menu (\u2630) in the top-left corner and select \"Access (IAM)\". </p> </li> <li> <p>In the left-hand menu, click on \"API Keys\". </p> </li> <li> <p>Click \"Create\" to generate a new API key. </p> </li> <li> <p>Enter a name for your API key and click \"Create\". </p> </li> <li> <p>Copy your API key and save it in a secure location. You will need it in later steps. </p> </li> </ol>"},{"location":"labs/environment-setup-lab/api_key_project_id_setup/#steps-to-access-project-id","title":"Steps to Access Project ID","text":"<ol> <li> <p>Click on the hamburger menu (three horizontal lines) located at the top-left corner of the screen, You will see view all project options under Project section.    </p> </li> <li> <p>Now you will be redirected to list of Projects, find and click on the project you want to work with.     </p> </li> <li> <p>Once inside the project view, click on the \"Manage Options\" button.</p> </li> <li> <p>After clicking \"Manage Options\", the Project ID will be displayed copy Project ID for further use.    </p> </li> </ol> <p>Well done!</p> <p>Now that we have created both the Project ID and the API Key, we will proceed with the creation of our agents.</p>"},{"location":"labs/environment-setup-lab/create-ibmid/","title":"Lab 0 - Environment setup: Create your IBMid","text":"<p>Note</p> <ul> <li>Follow these brief instructions to create an IBMID. These are specifically for our Business Partners and clients who may not have access to a TechZone environment previously. IBM employees do not need to register.</li> <li>Clients and Business Partners MUST have an IBMID BEFORE you invite them to the workshop environments. They will NOT receive email inviting them to the workshop account unless they already have an IBMID.</li> </ul> <ol> <li>Start by accessing the IBMid Registration Page</li> <li>Enter the required information in the fields provided, such as Email address, name, company, and country.</li> </ol> <p>Important</p> <p>Your email address becomes your IBMid, which you will use to access the bootcamp environment!</p> <p></p> <ol> <li>Click the Next button. You will receive an email containing a one-time verification code.</li> <li>In the\u00a0Verification field, enter the code that is provided in the email.</li> <li>Click\u00a0Create account.</li> <li>An email will be sent indicating that your IBMid account creation was successful and your account is now activated.</li> </ol>"},{"location":"labs/environment-setup-lab/create-project/","title":"Lab 0 - Environment setup: Setup your first project in watsonx.ai","text":"<p>Before starting the first technical lab, we will be walking through how to create your own project to get familiar with watsonx.ai and ensure you have access to your environment for the bootcamp.</p> <p>It is important we create a project in the right environment, or else it will cause issues down the line!</p>"},{"location":"labs/environment-setup-lab/create-project/#1-log-into-watsonx","title":"1. Log into watsonx","text":"<p>Follow this link to log into watsonx: https://dataplatform.cloud.ibm.com/wx/home?context=wx</p> <p>Info</p> <p>Please accept the Terms &amp; Conditions!</p>"},{"location":"labs/environment-setup-lab/create-project/#2-check-that-you-are-in-the-right-instance","title":"2. Check that you are in the right instance","text":"<p>You should now be taken to the watsonx home screen. Check at the top right that you are in the right instance. If it does not show the right name of the instance, you can select it in the drop-down. For the entirety of the bootcamp, you will be working in that same instance!</p> <p>If you do not know your instance, go to your techzone reservations list https://techzone.ibm.com/my/reservations. Look for your recently created reservation and click on \"Open this environment\". Scroll down and look for a reservation name that looks similar to this:  ITZ-WATSONX-21.</p> <p>Note: The instance at the top right tends to change to your default personal account every time you switch/go back to a new page. Thus, it's always good to check the top right corner every time you switch to a new page.</p> <p></p>"},{"location":"labs/environment-setup-lab/create-project/#3-create-a-new-project","title":"3. Create a new project","text":"<p>Now, we can go ahead and create a new project. </p> <p>In the Projects section, click the \"+\" symbol to create a new project.</p> <p>Or, use the link here to trigger a New Project creation.</p> <p></p> <p>Enter a unique name for your project, include both your first and last name and any other information you would like.</p> <p></p>"},{"location":"labs/environment-setup-lab/create-project/#cloud-object-storage-cos","title":"Cloud Object Storage (COS)","text":"<p>It is likely there is also already a Cloud Object Storage instance selected for you, with a name that starts with \"itzcos-...\" If so, you don't have to do anything! </p> <p>Otherwise, you may be prompted to select from multiple instances. Please consult with your bootcamp lead which COS instance to select.</p> <p></p>"},{"location":"labs/environment-setup-lab/create-project/#click-create","title":"Click Create","text":"<p>Now, click Create. It may take a few seconds to officially be created.</p>"},{"location":"labs/environment-setup-lab/create-project/#4-associate-the-correct-runtime-instance","title":"4. Associate the correct runtime instance","text":"<p>With the project created, you should be directed to the project home page. Select the \"Manage\" tab.</p> <p>Click on \"Services and Integrations\" in the left sidebar. Then, click on \"Associate service.\"</p> <p></p> <p>Select the service listed with \"Type\" = \"watsonx.ai Runtime\" and click Associate. </p> <p></p> <p>Note: If you can't find the service, remove all filters from the \"Locations\" dropdown. If you see 2+ Watson Machine Learning services, select the one where \"Group\" = the same environment name of the instance. The environment name can be found on https://techzone.ibm.com/my/reservations. </p> <p></p> <p>Time to get started with your first use case!</p>"},{"location":"labs/environment-setup-lab/pre-requisites/","title":"Lab 0 - Environment setup: Pre-requisites","text":"<p>Info</p> <p>All participants must follow the pre-requisite steps to reserve TechZone watsonx Orchestrate environment.</p> <p>For this bootcamp, we have created the Agentic AI Bootcamp TechZone bundle, which has all the components needed for the hands-on labs, including:</p> <ul> <li>watsonx.ai</li> <li>Cloud Object Storage (COS) &amp; watsonx.ai Runtime (formerly WML)</li> <li>watsonx Orchestrate</li> <li>IBM CodeEngine</li> <li>Container Registry</li> <li>watsonx.governance (for the demo)</li> </ul>"},{"location":"labs/environment-setup-lab/pre-requisites/#getting-started","title":"Getting started:","text":"<ol> <li>Create your IBMid</li> </ol> <ol> <li>wxO client setup</li> </ol>"},{"location":"labs/environment-setup-lab/wxo-client-setup/","title":"Lab 0 - Environment setup: running wxo-client adk locally","text":"<p>Note</p> <p>Follow these instructions for running wxo-client ADK locally in order to successfully complete the Agentic AI pro-code bootcamp labs.</p>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#installing-the-adk","title":"Installing the ADK","text":"<p>Install the IBM watsonx Orchestrate ADK on your computer. \u200b</p>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#installation-prerequisites","title":"Installation prerequisites","text":"<ul> <li> <p>Install the required software to enable the ADK installation:</p> <ul> <li>Python: The programming language that the ADK is written in. The ADK requires at least Python 3.12, and the latest compatible version is Python 3.13. For more information, see Python.</li> <li>Pip: Pip is Python\u2019s package manager. In some operating systems, it\u2019s included with Python\u2019s installation. For more information, see Pip.</li> </ul> </li> <li> <p>Optional: Create a virtual environment with venv to install the ADK. For more information, see venv --- Creation of virtual environments.</p> </li> </ul>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#installing-the-adk_1","title":"Installing the ADK","text":"<ul> <li> <p>Install the ADK with pip.</p> <pre><code>pip install ibm-watsonx-orchestrate\n</code></pre> </li> <li> <p>Test the installation:</p> <pre><code>orchestrate --help\n</code></pre> </li> </ul> <p>Note</p> <p>Use the --help argument to get information about each command and its arguments in the ADK CLI.</p>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#enabling-the-bootcamp-environment","title":"Enabling the Bootcamp Environment","text":"<ul> <li> <p>You would need following properties to activate \"bootcamp\" environment:</p> <ul> <li>IBM Cloud API Key</li> <li>WXO_INSTANCE_URL (Make sure you copy it from your wxO instance UI under the settings.)</li> </ul> </li> </ul>"},{"location":"labs/environment-setup-lab/wxo-client-setup/#steps-to-get-your-wxo-instance-url-and-ibm-cloud-api-key","title":"Steps to get your wxO instance URL and IBM Cloud API Key","text":"<ul> <li>After login to https://cloud.ibm.com, go to resources page by clicking on the left side menu</li> <li>Under the AI/Machine Learning click on your Watsonx Orchestrate Instance.</li> <li>Now, click on Launch Watsonx Orchestrate button in blue color.</li> <li>This would open wxO instance UI on a new tab.</li> <li>On this page, click on your profile image at the top right and then click on Settings</li> </ul> <ul> <li>On the Settings page, click on the API Details tab.</li> <li>Copy the Service instance URL, which you need to provide in the above env add command.</li> <li>Click on Generate API key and create a new API Key.  You would need this key to activate the bootcamp env.</li> </ul> <ul> <li>Run below commands to activate \"bootcamp\" environment and provide your IBM Cloud API Key once asked for the input.</li> </ul> <pre><code>orchestrate env add --name bootcamp --url &lt;REPLACE_WITH_WXO_INSTANCE_URL&gt; -t ibm_iam\norchestrate env activate bootcamp\n</code></pre> <p>Do not get confused with these credentials and DO NOT COPY THEM!</p> <p></p>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/","title":"Lab guide for vehicle maintenance use case","text":""},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#overview","title":"Overview","text":"<p>This LAB is written to simulate a vehicle troubleshooting scenario. Here the scenario is that a vehicle that has Internet of Things (IoT) has broken down and the user is seeking for help. The car has some weird noise and the user asks the chatbot why is there a noise what does it mean? and the AI Agent goes through reasoning to find out what went wrong and provide an analysis report and find nearest service center.</p>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Make sure you've already setup the environment:</li> <li>Lab 0 - Environment setup</li> <li>ADK Installation</li> <li>Download files</li> <li>Download the zip file from Lab1 folder</li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#reference-architecture","title":"Reference Architecture","text":""},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#key-components","title":"Key Components","text":"<ul> <li>Telematics data analyzer agent (External Agent) \u2013 Get the car telematics data and analyze it to provide a natural language summary</li> <li>Get Telematics data (Tool) \u2013 Get the telematics data of a car. (simulation)</li> <li>Get nearest service center (Tool) \u2013 Get the nearest service center. (takes lat &amp; lon and gives results)</li> <li>Troubleshoot agent (Native wxO Agent) \u2013 A supervisor agent that orchestrate between the following:<ol> <li>Knowledge (RAG):<ol> <li>DTC code list.pdf</li> <li>Car user manual.pdf</li> </ol> </li> <li>Toolset:<ol> <li>Agents:<ol> <li>Telematics data analyzer agent</li> </ol> </li> <li>Tools:<ol> <li>Get nearest service center</li> </ol> </li> </ol> </li> </ol> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#steps","title":"Steps","text":""},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#1-deploy-the-toolsets","title":"1. Deploy the toolsets","text":"<ul> <li>To get started with the Agent Builder on watsonx Orchestrate UI, you will have to deploy the toolsets first.</li> <li> <p>From the root of the downloaded files, run the following commands to deploy the toolsets:</p> <pre><code>orchestrate tools import -k python -f \"tools/get_nearest_service_center.py\" -r \"tools/requirements.txt\"\n</code></pre> <pre><code>orchestrate tools import -k python -f \"tools/get_vehicle_telematics.py\" -r \"tools/requirements.txt\"\n</code></pre> <pre><code>orchestrate knowledge-bases import -f knowledge_bases/knowledge.yaml\n</code></pre> <pre><code>orchestrate agents import -f agents/vehicle_telematics.yaml\n</code></pre> </li> <li> <p>Now that the toolsets are deployed, you can proceed with the agent development from the Agent Builder.</p> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#2-create-the-agent","title":"2. Create the agent","text":"<ul> <li> <p>Open the watsonx Orchestrate UI. Click on Create new agent on the bottom left.</p> <p></p> </li> <li> <p>Select the following:</p> <ul> <li>Create from scratch</li> <li>Name: Vehicle maintenance Agent</li> <li>Description: A helpful and knowledgeable vehicle troubleshooting assistant.</li> </ul> </li> <li> <p>Create the agent.</p> <p></p> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#3-configure-the-agent","title":"3. Configure the agent","text":"<ul> <li>The agent will have 4 sections:<ul> <li>Profile: Describes your agent's purpose.</li> <li>Knowledge: Provides the specific knowledge your agent needs to accomplish its goal. (RAG)</li> <li>Toolset: Add tools and other agents to help your agent take action.<ul> <li>Tools: Gives your agent access to your organization's tool to help it accomplish tasks.</li> <li>Agents: Identifies agents to whom your agent can delegate tasks.</li> </ul> </li> <li>Behavior: Defines how and where your agent should react to requests and respond to users. (System Prompt)</li> </ul> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#profile","title":"Profile","text":"<ul> <li> <p>This is the description of your agent, which you have already defined.</p> <p></p> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#knowledge","title":"Knowledge","text":"<ul> <li> <p>This is the additional context that you can provide to your agent for Retrieval Augmented Generation (RAG).</p> <p>Note</p> <p>Every agent developed on watsonx Orchestrate will support Retrieval Augmented Generation (RAG) out of the box!</p> </li> <li> <p>For the Vehicle maintenance agent, we'll upload some documents such as vehicle's user manual and diagnostic trouble codes (DTC). We have selected publicly available data such as Jeep Compass user manual and DTC codes list.</p> </li> <li> <p>Add a description and upload the files from the downloaded <code>knowledge_bases/</code> directory:</p> <ul> <li>Description: This knowledge addresses the car manual, dtc codes related information to the Jeep Compass 2024.</li> <li>Upload files from the downloaded files <code>knowledge_bases/</code> directory: <ul> <li>Jeep-Compass-OM-24.pdf</li> <li>dtc_list.pdf</li> </ul> </li> </ul> <p>Info</p> <p>You can also connect to external repository to add knowledge base. Currently supported external repositories are:</p> <ul> <li>Milvus</li> <li>Elastic search</li> </ul> <p></p> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#toolset","title":"Toolset","text":"<p>Note</p> <p>We deployed the custom tools and agents as a pre-requisite step earlier in the lab guide. We'll use the same in the Agent Builder.</p>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#tools","title":"Tools","text":"<ul> <li> <p>You can add tools from any of the following methods:</p> <ol> <li>Add from catalog: Choose from a catalog of existing tools.</li> <li>Add from local instance: Choose from a host of tools available on this instance.</li> <li>Import: Import an external tool.</li> <li>Create a new flow: Use the tool builder to create a sequence of steps.</li> </ol> </li> <li> <p>We will be using the Add from local instance. Click on Add tool and select Add from local instance.</p> </li> <li> <p>Select the tool:</p> <ul> <li>get_nearest_service_center</li> </ul> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#agents","title":"Agents","text":"<ul> <li> <p>You can add a new agent from any of the following methods:</p> <ol> <li>Add from catalog: Choose from a catalog of pre-built agents.</li> <li>Add from local instance: Choose from a list of agents available on this instance.</li> <li>Import: Import and register an external agent.</li> </ol> </li> <li> <p>We will be using the Add from local instance. Click on Add agent and select Add from local instance.</p> </li> <li> <p>Select the agent:</p> <ul> <li>vehicle_telematics_agent</li> </ul> </li> </ul> <p></p>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#behavior","title":"Behavior","text":"<ul> <li>Add the following system prompt:</li> </ul> <pre><code>You are an expert Vehicle maintenance assistant. Your job is to help car owners diagnose and understand vehicle issues by analyzing telematics data and referring to the official user manual. VIN Number: 1HGBH41JXMN109186\n\nYou are working with a vehicle_telematics_agent. This agent can get you a summary of vehicle telematics data.\n\nYou are also working with a tool get_nearest_service_center that takes lat &amp; lon to give a list of service centers.\n</code></pre>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#4-deploy-the-agent","title":"4. Deploy the agent","text":"<ul> <li> <p>Click on the top right Deploy button to make the agent live.</p> <p></p> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#5-test-the-agent","title":"5. Test the agent","text":"<ul> <li> <p>Go to the Agent chat page.</p> </li> <li> <p>Select the Vehicle maintenance agent.</p> <p></p> </li> <li> <p>Now you can chat with the agent with the suggested script below.</p> </li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/lab-guide/#suggested-script","title":"Suggested script","text":"<ol> <li> <p>What does the engine temperature warning light mean? -&gt; Troubleshoot agent will use the Knowledge base to RAG and answer this query</p> <p></p> </li> <li> <p>My car is shaking and I have the engine temperature warning light on can you diagnose it? -&gt; Troubleshoot agent will transfer the control to Telematics data analyzer agent which will ask follow-up questions if required and give a car health report. The car report is read, and a suggestion is provided by the Troubleshoot agent.</p> <p> </p> </li> <li> <p>Where is the nearest service center? -&gt; Troubleshoot agent will invoke the Get nearest service center tool and pass the lat &amp; long received from the Telematics data analyzer agent (assumption is that car will send the current lat &amp; long data as part of telematics data.) and get the nearest service centers from the list of service centers.</p> <p></p> </li> </ol> <p>Conclusion</p> <p>\ud83d\udc4f Congratulations on completing the lab! \ud83c\udf89</p>"},{"location":"use-cases-for-labs/low-code/automobile/vehicle-maintenance/","title":"Vehicle maintenance use case","text":""},{"location":"use-cases-for-labs/low-code/automobile/vehicle-maintenance/#overview","title":"Overview","text":"<p>The Vehicle Troubleshooting Assistant is an AI Agent designed to help car owners identify and understand vehicle issues by interpreting natural language inputs like \u201cMy car is shaking\u201d or \u201cCheck engine light is on.\u201d It combines real-time telematics data, diagnostic trouble codes (DTCs), and vehicle documentation to offer personalized, accurate diagnostics and actionable guidance such as finding nearby service centers, etc.</p>"},{"location":"use-cases-for-labs/low-code/automobile/vehicle-maintenance/#benefits","title":"Benefits","text":"<ul> <li>Customer Experience: Reduces stress for drivers by providing instant, understandable insights.</li> <li>Service Optimization: Reduces unnecessary service visits and helps service centers prioritize real issues.</li> <li>Brand Loyalty: Builds trust by offering proactive, intelligent support post-purchase.</li> <li>Data Utilization: Leverages telematics data and DTC documentation to deliver accurate, data-driven support.</li> <li>Scalability: Easily extendable across vehicle models, regions, and support channels (mobile app, web, IVR).</li> </ul>"},{"location":"use-cases-for-labs/low-code/automobile/vehicle-maintenance/#step-by-step-hands-on-instructions","title":"Step by step hands-on instructions","text":"<ul> <li>Please find the step by step hands-on instructions to execute this lab here: Lab-guide</li> </ul>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/","title":"\ud83e\uddd1\u200d\ud83d\udcbc AskHR","text":"<p>One of the main challenges faced by any big organization is their HR operations management. As companies grow in size, it becomes increasingly difficult to get information faster and execute tasks with ease. With the advent of Agentic systems, and the power or reasoning models, it becomes easier to have a single entry point for doing mostly every HR operation.</p>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#the-problem","title":"\ud83e\udd14 The Problem","text":"<p>TechCorp Inc., a global IT leader with a workforce of 100,000 employees, faced a significant challenge in managing its growing HR operations. As the company expanded, it struggled with efficiently handling employee profile data, time-off requests, and workforce management. Traditional HR systems were no longer sufficient to keep up with the scale and complexity. With multiple vendor tools used for different HR operations, it is difficult to integrate all of them together and provide a seamless experience to the user.</p>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#objective","title":"\ud83c\udfaf Objective","text":"<p>With this use case, we are planning to tackle the challenge by adopting an enterprise-grade platform, watsonx, equipped with Agentic capabilities. In this lab, we will see how the out-of-the-box prebuilt tools in watsonx Orchestrate can connect to HR management tools such as Workday, SuccessFactors, etc., or create custom tools to connect to any such systems easily. With agent driven insights, let's help TechCorp fast-track information retrieval, reduce administrative overhead, and ensure a more efficient and effective workforce.</p>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#business-value","title":"\ud83d\udcc8 Business value","text":"<p>The usage of an AI-backed system to optimize the HR process can have multi-dimensional impacts, such as quicker resolution time, higher user satisfaction, increased revenue, and reduction in employee burnout, which ultimately positively impacts your business value. On the other hand, leveraging the Agentic capabilities will come with its own additional set of values viz, improved data safety, and more grounded responses without hallucinations, thereby improving brand experience.</p>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#architecture","title":"\ud83c\udfdb\ufe0f Architecture","text":"<p>To streamline employee interactions with HR systems, we have designed an AI-driven AskHR agent using IBM watsonx. This solution leverages a multi-agent orchestration model that ensures intelligent reasoning, seamless action execution, and a responsive experience for employees. The architecture is built with watsonx Orchestrate enabling the HR agent to manage a wide range of HR-related queries and requests efficiently.</p>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#key-capabilities-of-the-askhr-agent","title":"Key capabilities of the AskHR agent:","text":"<ol> <li> <p>Automates routine HR tasks like checking leave balance, requesting time off, and updating employee details.</p> </li> <li> <p>Enables natural interaction between employees and backend HR systems through an intuitive app interface.</p> </li> <li> <p>Uses reasoning and tools to fetch or update information securely and reliably.</p> </li> <li> <p>Seamlessly integrates with internal systems using OpenAPI connectors.</p> </li> <li> <p>This system leverages watsonx Orchestrate for coordination and advanced reasoning and web-based tasks, offering a comprehensive AI-powered HR support experience.</p> </li> </ol> <p></p>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#architecture-components","title":"Architecture Components","text":"<ul> <li>HR Agent and App (IBM watsonx Orchestrate): The HR agent acts as the central orchestrator, managing user interactions and delegating tasks to appropriate tools in the HR App.</li> </ul> <p>It has a collection of reusable tools, RAG agent powered by OpenAPI and metadata descriptions. Each tool is designed to perform a specific HR-related task, such as: Checking time-off balances Submitting time-off requests Updating personal details (business title, home address)</p> <p>RAG Agent retrieves relevant information from documents to answer user queries</p> <ul> <li>Human Capital Management (HCM) System: The HR app communicates with the underlying HCM system to fetch or update employee data, ensuring real-time synchronization and accuracy.</li> </ul>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#demo","title":"\ud83c\udfa5 Demo","text":"<p>askHR demo</p> <p>[!IMPORTANT] This lab uses a simulator for a Human Capital Management system. However, this could be easily changed to any real system running in production such as Workday or others.</p>"},{"location":"use-cases-for-labs/low-code/chro/hr-use-case/#step-by-step-hands-on-instructions","title":"Step by step hands-on instructions","text":"<ul> <li>Please find the step by step hands-on instructions to execute this lab here: Lab-guide</li> </ul>"},{"location":"use-cases-for-labs/low-code/chro/lab-guide/","title":"\ud83e\uddd1\u200d\ud83d\udcbc AskHR: Automate HR tasks with Agentic AI","text":""},{"location":"use-cases-for-labs/low-code/chro/lab-guide/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Make sure you've already setup the environment:</li> <li>Lab 0 - Environment setup</li> <li>ADK Installation</li> <li>Download files</li> <li>Download the zip file from Lab1 folder</li> </ul>"},{"location":"use-cases-for-labs/low-code/chro/lab-guide/#step-by-step-instructions-to-build-the-hr-agent","title":"Step by step instructions to build the HR Agent","text":"<ol> <li> <p>When you launch watsonx Orchestrate, you'll be directed to this page. Click on the hamburger menu in the top left corner:</p> <p></p> </li> <li> <p>Click on the down arrow next to Build. Then click on Agent Builder:</p> <p></p> </li> <li> <p>Click on Create agent +:</p> <p></p> </li> <li> <p>Select \"Create from scratch\", give your agent a name, e.g. \"HR Agent\", and fill in the description as shown below:</p> <pre><code>You are an agent who handles employee HR queries.  You provide short and crisp responses, keeping the output to 200 words or less.  You can help users check their profile data, retrieve latest time off balance, update title or address, and request time off. You can also answer general questions about company benefits.\n</code></pre> </li> <li> <p>Click on Create</p> <p></p> </li> <li> <p>Scroll down the screen to the Knowledge section. Copy the following description into the Knowledge Description section:</p> <pre><code>This knowledge base addresses the company's employee benefits, including parental leaves, pet policy, flexible work arrangements, and student loan repayment.\n</code></pre> </li> <li> <p>Click on Upload files</p> <p></p> </li> <li> <p>Upload the Employee Benefits.pdf and click on Upload:</p> <p> </p> </li> <li> <p>Wait until the file has been uploaded successfully and double check that it is now shown in the Knowledge section:</p> <p> </p> </li> <li> <p>Scroll down to the Toolset section. Click on Add tool +:</p> <p></p> </li> <li> <p>Select Import</p> </li> <li> <p>Drag and drop or click to upload the hr.yaml file (provided to you by the instructor), then click on Next:</p> <p></p> </li> <li> <p>Select all the operations and click on Done:</p> <p></p> </li> <li> <p>Scroll down to the Behavior section. Insert the instructions below into the Instructions field:</p> <pre><code>Use your knowledge base to answer general questions about employee benefits. \n\nUse the tools to get or update user specific information.\n\nWhen user asks to show profile data or check time off balance or update title/address or request time off for the very first time,  first ask the user for their name,  then invoke the tool and then use the same name in the whole session without asking for the name again.\n\nWhen the user requests time off, convert the dates to YYYY-MM-DD format, e.g. 5/22/2025 should be converted to 2025-05-22 before passing the date to the post_request_time_off tool.\n</code></pre> <p></p> </li> <li> <p>Test your agent in the preview chat on the right side by asking the following questions and validating the responses.  They should look similar to what is shown in the screenshots below:</p> <pre><code>1. What is the pet policy? \n\n2. Show me my profile data.\n\n3. I'd like to update my title. \n\n4. Update my address\n\n5. What is my time off balance?\n\n6. Request time off\n\n7. Show my profile data.\n</code></pre> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>Once you have validated the answers, click on Deploy in the top right corner to deploy your agent:</p> <p></p> </li> <li> <p>Click on the hamburger menu in the top left corner and then click on Chat:</p> <p></p> </li> <li> <p>Make sure HR Agent is selected. You can now test your agent:</p> <p></p> </li> </ol> <p>Conclusion</p> <p>\ud83d\udc4f Congratulations on completing the lab! \ud83c\udf89</p>"},{"location":"use-cases-for-labs/pro-code/bfsi/financial-research-and-analysis/","title":"Financial research and analysis use case","text":""},{"location":"use-cases-for-labs/pro-code/bfsi/financial-research-and-analysis/#coming-soon","title":"Coming soon!","text":""},{"location":"use-cases-for-labs/pro-code/bfsi/lab-guide/","title":"Lab guide for financial research and analysis","text":""},{"location":"use-cases-for-labs/pro-code/bfsi/lab-guide/#coming-soon","title":"Coming soon!","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/","title":"Insurance claim pre-authorization use case","text":"<p>This use case demonstrates the deployment of AI Agents to enhance the cashless hospitalization experience by streamlining both customer interaction and backend claim processing.</p> <p>At the hospital front desk, an AI-powered virtual agent acts as the first point of contact, delivering efficient and personalized support for insurance-related queries. It provides human-like responses, helping customers understand their policy coverage and guiding them seamlessly through the claim initiation process.</p> <p>Simultaneously, a background AI claim analyst agent is triggered to proactively evaluate the claim, verify policy entitlements, and calculate the pre-authorized amount based on policy rules and treatment details. Once reviewed, it automatically notifies the customer via email with the approval status and next steps.</p> <p>In certain scenarios, this claim analyst agent can also be manually triggered by a TPA desk agent</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#the-problem","title":"\ud83e\uddfe The Problem","text":"<p>The traditional cashless hospitalization process in insurance involves multiple manual steps or traditional assistant flow\u2014including front desk coordination, claim intake, document validation, and pre-authorization. These manual processes are:</p> <ul> <li>\u23f1\ufe0f Time-consuming</li> <li>\u26a0\ufe0f Prone to human error</li> <li>\ud83c\udfe5 Delay critical treatment</li> <li>\ud83d\ude1f Cause poor customer experience</li> </ul> <p>As a result, hospitals, insurers, and patients face significant friction due to:</p> <ul> <li>\ud83d\udd01 Inefficient coordination between hospital front desk staff and insurance providers</li> <li>\ud83d\udcc4 Manual verification of patient policy eligibility and supporting documents</li> <li>\u231b Delayed pre-authorization approvals caused by backlogs and manual checks</li> <li>\ud83d\udcb8 High operational costs from repetitive, rule-based tasks performed by human agents</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#as-is-architecture","title":"As-Is Architecture","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#objective","title":"\ud83c\udfaf Objective","text":"<p>The objective is to design an Agentic AI solution that automates and streamlines the end-to-end cashless hospitalization claim process, delivering faster turnaround, improved customer experience, and operational efficiency.</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#key-highlights","title":"\u2705 Key Highlights","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#1-front-desk-ai-agent-for-customer-support-collaboration","title":"\ud83e\udd16 1. Front Desk AI Agent for Customer Support &amp; Collaboration","text":"<ul> <li>Deploy an AI-powered Front Desk Agent to serve as the primary interface to the customer.</li> <li>This agent delivers human-like, real-time support for customer queries related to policy details, claim process, and documentation.</li> <li>It actively collaborates with other specialized AI agents, such as those responsible for claim intake and document verification, to ensure a smooth and accurate initiation of the claim process.</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#2-claim-analyst-ai-agent-for-proactive-claim-processing","title":"\ud83e\udd16 2. Claim Analyst AI Agent for Proactive Claim Processing","text":"<ul> <li>Implement a Claim Analyst AI Agent that works proactively in the background.</li> <li> <p>This agent collaborates with claim adjudication and report agents to:</p> <ul> <li>Calculate the pre-authorized claim amount</li> <li>Generate a detailed report</li> <li>Once processed, it automatically notifies the customer via email, ensuring transparency and speed.</li> </ul> </li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#3-intelligent-access-to-enterprise-systems","title":"\ud83d\udee0\ufe0f 3. Intelligent Access to Enterprise Systems","text":"<ul> <li>Provide AI agents with secure and intelligent access to relevant enterprise systems and data repositories.</li> <li>Enables agents to fetch contextual information in real time, supporting more accurate decision-making and faster response times.</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#business-values","title":"\ud83d\ude80 Business values","text":"<ol> <li>Faster, smoother interactions boost first-contact resolution and customer trust.</li> <li>Resolving multiple issues in one chat cuts handling time and costs.</li> <li>Accurate, complete responses reduce errors and improve satisfaction.</li> <li>Easy-to-understand insurance/claims info improves customer experience.</li> <li>Location-based help (hospitals/doctors) adds convenience and empathy.</li> <li>Auto pre-authorization speeds up approvals and reduces manual work.</li> <li>No more manual document uploads means fewer frustrations and faster claims.</li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#to-be-architecture","title":"To-Be Architecture","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#ai-agents-working-model","title":"AI Agents working model","text":"<p>The diagram below demonstrates the AI agent's reasoning capabilities in processing insurance claims for pre-authorization amount</p> <p></p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#step-by-step-hands-on-instructions","title":"Step by step hands-on instructions","text":"<ul> <li>Please find the step by step hands-on instructions to execute this lab here: Lab-guide</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/insurance-claim-pre-authorization/#demo-video","title":"Demo video","text":"<p>ICP_Pre_Hosp_Demo.mp4</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/","title":"Cashless claim process: customer support &amp; Pre-authorization","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#lab-guide-use-case-implementation-guide","title":"\ud83d\udee0\ufe0f Lab guide -  Use Case Implementation Guide","text":"<p>This guide provides step-by-step instructions for building and testing the use case.</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Make sure you've already setup the environment:</li> <li>Lab 0 - Environment setup: Pre-requisites</li> <li>ADK Installation</li> <li>Download files</li> <li>Download the zip file from Lab2 folder</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#use-case-summary","title":"\ud83d\udccc Use Case Summary","text":"<p>The use case outlines two key stages in the cashless hospitalization claim process:</p> <ol> <li>\ud83d\udcde Customer Support</li> <li>Assist policyholders with claim-related inquiries.</li> <li> <p>Clarify policy benefits and processing steps.</p> </li> <li> <p>\u2699\ufe0f Pre-Authorization Calculation</p> </li> <li>Automated back-end process for insurers.</li> <li>Determines approved coverage based on hospital treatment estimates.</li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#scenario","title":"\ud83c\udfaf Scenario","text":"<p>A policyholder seeks treatment with an active insurance policy but faces uncertainties:</p> <ul> <li>\u2753 Unclear on coverage &amp; cashless claims</li> <li>\ud83d\udcb8 Concerned about out-of-pocket expenses</li> </ul> <p>Key Requirements: \u2714\ufe0f Transparent policy benefits explanation. \u2714\ufe0f Clear breakdown of insurer-approved amount vs. hospital treatment cost.</p> <p>This use case ensures a seamless customer experience while optimizing insurer workflows.</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#build-and-run","title":"\u23f3 Build and run","text":"<p>Steps to connect with service-now</p> <ol> <li>Sign-up for a Service Now account at https://developer.servicenow.com/dev.do</li> <li>Validate your email address (check email)</li> <li>On the landing page click start building. This will allocate a new instance of SNOW for you.</li> <li>Back on the landing page, click your profile icon on the top right and under My instance click manage instance password.</li> <li>Create an application connection using these credentials <pre><code>orchestrate connections add -a service-now\norchestrate connections configure -a service-now --env live --type team --kind basic --url &lt;the instance url&gt;\norchestrate connections set-credentials -a service-now --env live -u admin -p &lt;password from modal&gt;\n</code></pre></li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#create-project-structure","title":"Create project structure","text":"<p>Create following folder structure -</p> <pre><code>wxo-agents ---\n              |---agents\n              |---tools\n              |---knowledge_base\n                  |---documents\n</code></pre>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#creating-tools","title":"Creating tools","text":"<p>There are many tools used in this use-case, however, for lab purpose we will be creating one python tool and will import rest of the required tool.</p> <p>Create a tool to call a decision service to calculate the pre-authorized amount.</p> <p>Steps - </p> <ol> <li> <p>create a file in tools directory called <code>calculate_preauth_amount.py</code></p> </li> <li> <p>add following imports to your file</p> <pre><code>from pydantic import Field, BaseModel\nfrom typing import Optional\nfrom ibm_watsonx_orchestrate.agent_builder.tools import tool\nimport requests\n</code></pre> </li> <li> <p>add following method </p> <pre><code>def calculate_preauth_amount(\n        estimated_treatment_cost: float,\n        policy_coverage_limit: float,\n        disease_category:str,\n        hospital_tier: int,\n        co_payment_percentage: float,\n) -&gt; dict:\n    \"\"\"\n    Calculate pre-authorization amount for insurance claims.\n    Accepts parameters as keyword arguments which will be converted to ClaimPreauthAmountRequest.\n    \"\"\"\n    try:\n\n        req = {\n            \"estimated_treatment_cost\": estimated_treatment_cost,\n            \"policy_coverage_limit\": policy_coverage_limit,\n            \"disease_category\": disease_category,\n            \"co_payment_percentage\": co_payment_percentage,\n            \"hospital_tier\": hospital_tier\n        }\n        base_url = \"https://preauthorisation-ordermanagement.cp4bautomation-685c4d909dba5536870f4da931535b5a-0000.eu-de.containers.appdomain.cloud/preauth/calculate\"\n        headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        response = requests.post(\n            base_url,\n            headers=headers,\n            json=req\n        )\n        response.raise_for_status()\n\n        response_data = response.json()\n        return response_data\n\n    except Exception as e:\n        return dict(\n            approved_amount=0,\n            currency=\"INR\",\n            message=f\"Error: {str(e)}\"\n        )\n</code></pre> </li> <li> <p>add below decorator to calculate_preauth_amount method  <pre><code>@tool(name=\"calculate_preauth_amount\", description=\"Calculates the pre-authorized amount\")\n</code></pre></p> </li> <li> <p>copy all the file in tools folder to your 'wxo-agents/tools' folder</p> </li> <li> <p>add followings to your 'requirements.txt' <pre><code>requests\n</code></pre></p> </li> <li> <p>You can use below command to import your tools <pre><code>$ orchestrate tools import -k python \\\n    -f \"&lt;path-to-your-tool&gt;/&lt;tool-file-name&gt;.py\" \\\n    -r \"requirements.txt\"\n</code></pre></p> </li> <li> <p>However, we have provided shell/bat scripts to automate this step. Run the script: <pre><code>./import-tools.sh\n</code></pre></p> </li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#creating-knowledge","title":"Creating knowledge","text":"<p>In watsonx Orchestrate, agents can use knowledge bases to search for user requests and return relevant, grounded content or answers.</p> <p>You can create two types of knowledge bases: built-in and external. Built-in knowledge bases are created using a built-in Milvus instance and are populated with documents you import. External knowledge bases refer to your own Milvus or Elasticsearch instances, which you can connect to watsonx Orchestrate for use by agents.</p> <p>In this lab we are going to build in-built knowledge base.</p> <p>Steps - </p> <ol> <li>copy pdf files from lab documents to wxo-agents/knowledge_base/documents</li> <li>create medibuddy_claim_process.yaml file and add following  <pre><code>spec_version: v1\nkind: knowledge_base \nname: medibuddy_claim_process\ndescription: This knowledge addresses the claim process for Medibuddy insurance.\ndocuments:\n  - documents/medibuddy_guidelines.pdf\n</code></pre></li> <li>create users_insurance_policy.yaml file and add following  <pre><code>spec_version: v1\nkind: knowledge_base \nname: insurance_policy_details\ndescription: This knowledge addresses the user's insurance policy details.\ndocuments:\n  - documents/Comprehensive_health_policy.pdf\n</code></pre></li> <li>Import both the knowledge-base using below command <pre><code>orchestrate knowledge-bases import -f &lt;knowledge-base-file-path&gt;\n</code></pre></li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#creating-agents","title":"Creating agents","text":"<p>With the ADK, you can create native agents, external agents, and external watsonx Assistants agents. Each of these agent types requires its own set of configurations.</p> <p>In this lab, we will build and import native agents of each type listed below, and then import the remaining agents..</p> <p>We are having two types of native agents in our use case. 1. Agents using knowledge_base 2. Agents using tools </p> <p>Steps -</p> <ol> <li>Create native agents with knowledge_base - create policy_support_agent.yaml file and add below content <pre><code>spec_version: v1\nkind: native\nname: policy_support_agent\ndescription: This agent provides answers to the frequently asked questions related policy claim process, network hospitals and any other information related to the users insurance policy.\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\nstyle: react\ninstructions: &gt;\n  You are a QnA agent. Your task is to answer the questions related to the users insurance policy. \n  You can use the knowledge base to answer the questions. \n  If you are not sure about the answer, please ask for clarification do not provide a generic response.\n  You can also ask for more information if needed.\n  You can also provide links to the relevant documents in the knowledge base.\n  Don't make up answers.\n\n  Transfer to supervisor is must\n\nknowledge_base:\n  - insurance_policy_details\n</code></pre></li> <li>Create native agents with tools - create claim_adjudication_agent.yaml and below content <pre><code>spec_version: v1\nstyle: default\nname: claim_adjudication_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  your primary goal is to calculate pre-authorized amount based on the information collected and received.\n\n  you are an agent responsible for claims adjudication, you use your decision-making capability to evaluate, validate, and settle claims.\n  The goal is to balance fair payouts to policyholders while protecting the insurer from unjustified losses. \n  Efficient adjudication improves customer satisfaction and operational accuracy.\n\n  your primary goal is to calculate pre-authorized amount based on the information collected and received.\n\ninstructions: &gt;\n\n  Condition: Transfer from claim_analyst_agent\n    Action:\n      1. Use read_email tool to read the email and get the required information\n      2. Use get_network_hospitals to get the hospital_tier hospital mentioned in email sent from hospital\n      3. Use get_policy_info tool to get the information about policy using customer id passed by user. remove '%' from co payment before passing to calculate_preauth_amount tool.\n      4. Must call calculate_preauth_amount tool  to calculate the pre-authorized amount\n      5. Prepare a summary based on all above information\n      6. Transfer to supervisor:\n         \"observation: send report to customer's email.\"\n\n\ntools:\n  - calculate_preauth_amount\n  - read_email\n  - get_network_hospitals\n  - get_policy_info\n</code></pre></li> <li> <p>copy all the .yaml file from lab_file/agents to wxo-agents/agents</p> </li> <li> <p>Importing the agents - use below commands to import the agents</p> </li> </ol> <pre><code>orchestrate agents import -f &lt;path to .yaml/.json/.py file&gt;\n</code></pre>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#test-the-use-case","title":"Test the use case","text":""},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#front-desk-agent","title":"Front desk agent","text":"<p>Select 'claim_support_desk_agent' from agents menu on left hand-side.</p> <p>Use below script to test the front desk agent  <pre><code>- What is covered under in-patient treatment in this policy?\n- What are the exclusions for domiciliary treatment?\n- I want initiate a claim process\n</code></pre> if prompted for customer id and aadhar. Enter below  <pre><code>my customer id is CUST001 and aadhar is 1234-5678-9012\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#claim-analyst-agent","title":"Claim analyst agent","text":"<p>Select 'claim_analyst_agent' from agents menu on left hand-side.</p> <p>Use below message to trigger the agent  <pre><code>- Calculate pre-authorization amount for customer CUST001\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim/lab-guide/#screenshot-of-an-email-generated-by-claim-analyst-agent","title":"Screenshot of an email generated by claim analyst agent","text":"<p>Conclusion</p> <p>\ud83d\udc4f Congratulations on completing the lab! \ud83c\udf89</p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post/insurance-claim-post-hospitalization/","title":"Health Insurance - Post Hospitalization Claim","text":"<p>Healthcare insurance claims involve multiple steps, data sources, and decision points, making it ideal for a multi-agent system.</p> <p>Here's a scenario: \"Member Sarah submits a claim for a specialist visit and subsequent lab tests.\"</p> <p>We'll define a few agents, each with a specific role and toolset. There will also be a \"Master Orchestrator Agent\" (often implicit or part of the platform) that routes tasks between agents.</p> <p>The Agents &amp; Their Tools:</p> <ol> <li> <p>Frontend Conversational Agent (FCA)</p> <ul> <li>Role: Interacts directly with Sarah (the member) via chat, voice, or a web portal. Gathers initial information, provides updates, and answers basic queries.</li> <li>Tools:<ul> <li>Natural Language Understanding (NLU) &amp; Dialogue Management Engine: To understand Sarah's requests and maintain conversational context.</li> <li>Knowledge Base Access: For FAQs (e.g., \"How do I submit a claim?\", \"What's my deductible?\").</li> <li>Member Authentication API: To verify Sarah's identity.</li> <li>Basic Claim Form Interface: A structured way to collect initial claim details if not purely conversational.</li> </ul> </li> </ul> </li> <li> <p>Claim Intake &amp; Validation Agent (CIVA)</p> <ul> <li>Role: Receives initial claim data from FCA. Validates completeness and basic accuracy of submitted information. Checks for immediate red flags.</li> <li>Tools:<ul> <li>Optical Character Recognition (OCR) Service: If claim documents (e.g., superbill) are uploaded.</li> <li>Data Extraction &amp; Structuring Tools: To pull relevant fields (CPT codes, ICD-10 codes, provider NPI, date of service, costs) from unstructured/semi-structured input.</li> <li>Member Eligibility Verification API: Connects to the core insurance system to confirm Sarah is an active member and eligible for benefits on the date of service.</li> <li>Provider Network API: Checks if the specialist and lab are in-network or out-of-network.</li> <li>Basic Rules Engine: For initial validation checks (e.g., \"Is date of service in the past?\", \"Are cost fields numeric?\").</li> </ul> </li> </ul> </li> <li> <p>Policy &amp; Benefits Adjudication Agent (PBAA)</p> <ul> <li>Role: Takes validated claim information. Determines coverage based on Sarah's specific policy, applies benefits (deductibles, co-pays, coinsurance), and checks for pre-authorization requirements.</li> <li>Tools:<ul> <li>Core Policy Management System API: Accesses detailed policy terms, coverage limits, accumulator status (deductible met, out-of-pocket max).</li> <li>Benefits Engine/Calculator: Applies financial rules based on the policy.</li> <li>Pre-authorization Database API: Checks if the services required pre-authorization and if it was obtained.</li> <li>Medical Necessity &amp; Coding Guidelines Database (e.g., InterQual, MCG, NCD/LCD): For initial cross-referencing of procedure codes against diagnosis codes for appropriateness (can be a lighter check than a dedicated clinical review agent).</li> </ul> </li> </ul> </li> <li> <p>Clinical Review &amp; Fraud Detection Agent (CRFDA) - (Optional, for complex cases or high-value claims)</p> <ul> <li>Role: Performs deeper clinical review for medical necessity, appropriateness of codes, and potential fraud, waste, or abuse. This agent might be triggered if certain thresholds or flags are met.</li> <li>Tools:<ul> <li>Advanced Medical Coding &amp; Billing Edit Software (e.g., ClaimScrubber functionality): Detects un-bundling, up-coding, incorrect modifiers.</li> <li>Predictive Analytics &amp; Machine Learning Models: Trained on historical claim data to identify patterns indicative of fraud or abuse.</li> <li>Clinical Expert System/Knowledge Base: More in-depth medical necessity guidelines and treatment protocols.</li> <li>Case Management System API: To flag claims for human review if AI confidence is low or a significant issue is detected.</li> </ul> </li> </ul> </li> <li> <p>Payment &amp; Communication Agent (PCA)</p> <ul> <li>Role: Processes the finalized claim (approved amount), generates Explanation of Benefits (EOB), and initiates communication to the member and provider.</li> <li>Tools:<ul> <li>Payment Processing Gateway API: To schedule payments to providers or reimbursements to members.</li> <li>Document Generation Service: To create EOBs.</li> <li>Communication Platform API (Email, SMS, Secure Portal Messaging): To send notifications and EOBs.</li> <li>Claim Status Update API: To update the central claim record.</li> </ul> </li> </ul> </li> </ol> <p>Conversational Flow &amp; Multi-Agent Interaction:</p> <p>(Master Orchestrator Agent is implicitly routing tasks based on outcomes)</p> <p>Phase 1: Claim Submission &amp; Initial Validation</p> <ol> <li> <p>Sarah (Member) -&gt; Frontend Conversational Agent (FCA):</p> <ul> <li>Sarah: \"Hi, I need to submit a new claim for a doctor's visit.\"</li> <li>FCA (using NLU): \"Hello Sarah! I can help with that. To start, can you please provide your Member ID and Date of Birth for verification?\"</li> <li>(Sarah provides details)</li> <li>FCA (using Member Authentication API): \"Thank you, you're verified. Was this for a specialist visit?\"</li> <li>Sarah: \"Yes, Dr. Emily Carter on October 26th, 2023. And I also had some lab tests done at Quest Diagnostics the same day.\"</li> <li>FCA (using Claim Form Interface logic &amp; NLU): \"Okay, Dr. Carter on 10/26/2023 and labs at Quest Diagnostics. Do you have the superbill or details of the services and costs? You can type them or upload a document.\"</li> <li>(Sarah uploads a PDF superbill for the specialist and types info for the lab tests)</li> <li>FCA: \"Thanks! I've received the information. I'll pass this along for initial processing. Your reference ID for this submission is CLM12345.\"<ul> <li>FCA sends structured data + PDF to Orchestrator for routing.</li> </ul> </li> </ul> </li> <li> <p>Orchestrator -&gt; Claim Intake &amp; Validation Agent (CIVA):</p> <ul> <li>CIVA (receives data):<ul> <li>(Uses OCR Service on PDF): Extracts Dr. Carter's NPI, CPT codes (e.g., 99214), ICD-10 codes (e.g., M54.5 - Low back pain), charges.</li> <li>(Uses Data Extraction for typed lab info): Extracts Quest NPI, CPT codes (e.g., 80053), charges.</li> <li>(Uses Member Eligibility Verification API): Confirms Sarah's policy was active on 10/26/2023. Result: Active.</li> <li>(Uses Provider Network API): Checks Dr. Carter (NPI) and Quest Diagnostics (NPI). Result: Dr. Carter In-Network, Quest Diagnostics In-Network.</li> <li>(Uses Basic Rules Engine): All mandatory fields present, dates valid. Result: Basic validation passed.</li> <li>CIVA sends validated &amp; structured claim data (now two separate line items: one for specialist, one for lab) to Orchestrator.</li> </ul> </li> </ul> </li> </ol> <p>Phase 2: Adjudication</p> <ol> <li>Orchestrator -&gt; Policy &amp; Benefits Adjudication Agent (PBAA):<ul> <li>PBAA (receives validated claim data for Dr. Carter's visit):<ul> <li>(Uses Core Policy Management System API): Retrieves Sarah's plan details: $500 deductible (status: $200 met), 20% coinsurance for specialist after deductible, $30 copay for labs (deductible waived for labs).</li> <li>(Uses Pre-authorization Database API): Checks if CPT 99214 requires pre-auth for diagnosis M54.5. Result: No pre-auth required.</li> <li>(Uses Benefits Engine):<ul> <li>Specialist charge: $250.</li> <li>Remaining deductible: $500 - $200 = $300.</li> <li>Amount applied to deductible: $250 (since charge &lt; remaining deductible).</li> <li>Patient responsibility for specialist: $250 (goes to deductible).</li> <li>Insurance Payout for specialist: $0.</li> <li>Deductible now met: $200 + $250 = $450.</li> </ul> </li> </ul> </li> <li>PBAA (receives validated claim data for Quest Labs):<ul> <li>(Uses Core Policy Management System API): Confirms lab benefits.</li> <li>(Uses Pre-authorization Database API): Checks if CPT 80053 requires pre-auth. Result: No pre-auth required.</li> <li>(Uses Benefits Engine):<ul> <li>Lab charge: $120.</li> <li>Copay: $30.</li> <li>Patient responsibility for labs: $30.</li> <li>Insurance Payout for labs: $120 (allowed) - $30 (copay) = $90.</li> </ul> </li> <li>PBAA flags that the claim is relatively straightforward and doesn't meet thresholds for CRFDA. Sends adjudicated claim data (member responsibility, insurance payout for each line) to Orchestrator.</li> </ul> </li> </ul> </li> </ol> <p>Phase 3: Finalization &amp; Communication</p> <ol> <li> <p>Orchestrator -&gt; Payment &amp; Communication Agent (PCA):</p> <ul> <li>PCA (receives adjudicated claim data):<ul> <li>(Uses Document Generation Service): Creates EOB for Sarah detailing:<ul> <li>Dr. Carter: $250 charged, $250 applied to deductible, $0 paid by insurance.</li> <li>Quest Labs: $120 charged, $30 member copay, $90 paid by insurance.</li> <li>Updated deductible status: $450 met of $500.</li> </ul> </li> <li>(Uses Payment Processing Gateway API): Schedules $90 payment to Quest Diagnostics.</li> <li>(Uses Communication Platform API): Sends email to Sarah: \"Your claim CLM12345 has been processed. Your EOB is available in your secure portal. Click here to view.\" Also sends notification to secure portal.</li> <li>(Uses Claim Status Update API): Marks claim CLM12345 as \"Processed.\"</li> <li>PCA notifies Orchestrator of completion.</li> </ul> </li> </ul> </li> <li> <p>Orchestrator -&gt; Frontend Conversational Agent (FCA) (Optional update):</p> <ul> <li>(If Sarah is still in an active chat or checks back)</li> <li>FCA: \"Good news, Sarah! Your claim CLM12345 has been processed. You can find the Explanation of Benefits in your secure member portal. For the specialist visit, $250 was applied to your deductible. For the lab tests, your copay is $30, and we've paid $90 to Quest Diagnostics.\"</li> </ul> </li> </ol> <p>If CRFDA Agent was Involved (Example):</p> <p>Suppose the specialist claim was for a very expensive, unusual procedure. *   PBAA would flag it after initial benefit check and send it to Orchestrator. *   Orchestrator -&gt; Clinical Review &amp; Fraud Detection Agent (CRFDA):     *   CRFDA:         *   (Uses Advanced Medical Coding &amp; Billing Edit Software): Checks for bundling, modifier accuracy. Result: Codes appear correct.         *   (Uses Predictive Analytics &amp; ML Models): Assesses fraud risk. Result: Low risk.         *   (Uses Clinical Expert System): Verifies medical necessity for the procedure against diagnosis. Result: Consistent with guidelines for M54.5 after conservative treatment failure (assuming this info was also gathered or inferred).         *   CRFDA sends \"Approved from clinical standpoint\" back to Orchestrator, who then routes it back to PBAA to finalize financial adjudication if not already done, or directly to PCA.</p> <p>Key Benefits of this Agentic Approach:</p> <ol> <li>Specialization: Each agent focuses on what it does best with its specific tools.</li> <li>Scalability: Individual agents can be scaled independently based on load.</li> <li>Maintainability: Easier to update or replace one agent's tools or logic without affecting the entire system.</li> <li>Flexibility: New agents (e.g., a \"Prior Authorization Specialist Agent\") can be added to the workflow.</li> <li>Efficiency: Parallel processing can occur (e.g., CIVA validating two parts of a claim simultaneously).</li> <li>Improved User Experience: The FCA provides a single, intelligent point of contact, shielding the user from complex backend processes.</li> </ol> <p>This multi-agent system allows for a sophisticated, automated, yet adaptable claims processing workflow.</p> <p>Important things to consider</p> <ul> <li>Make sure you go through the Agents and Tools files from the downloaded artifacts</li> <li>This use case is built using all native Agents and tools in Watsonx Orchestrate</li> <li>Agents and respective tools are deployed within wxO instance and AgentOps is taken care of.</li> <li>For adding Observability, you can integrate it with Langfuse and that would show all the traces, sessions, observations and more from all Agents, LLMs, Thinking process and much more on the dashboard.</li> <li>For further Agentic AI Governance, this can be integrated with IBM Watsonx Governance.</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post/lab-guide/","title":"Health Insurance - Post Hospitalization Claim LAB Guide","text":"<p>This LAB is written to simulate a customer care agent for hospitals. Healthcare insurance claims post hospitalization scenario that involve multiple steps, data sources, and decision points, making it ideal for a multi-agent system. </p>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post/lab-guide/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Make sure you've already setup the environment:</li> <li>Lab 0 - Environment setup</li> <li>ADK Installation</li> <li>Download files</li> <li>Download the zip file from Lab2 folder</li> </ul>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post/lab-guide/#steps-to-import","title":"Steps to import","text":"<ol> <li>Sign-up for a Service Now account at https://developer.servicenow.com/dev.do</li> <li>Validate your email address (check email)</li> <li>On the landing page click start building. This will allocate a new instance of SNOW for you. </li> <li>Back on the landing page, click your profile icon on the top right and under \"My instance\" click manage instance password.</li> <li>Create an application connection using these credentials <pre><code>orchestrate connections add -a service-now\norchestrate connections configure -a service-now --env live --type team --kind basic --url &lt;the instance url&gt;\norchestrate connections set-credentials -a service-now --env live -u admin -p &lt;password from modal&gt;\n</code></pre></li> <li>Run the import all script <code>./scripts/import-all.sh</code></li> <li>Go to Manage Agents on your Watsonx Orchestrate Instance and make sure you deploy each imported Agent.</li> <li>Come back to the home/chat page and make sure you've selected \"frontend_conversational\" from the left drop down of Agents.</li> </ol>"},{"location":"use-cases-for-labs/pro-code/insurance-claim-post/lab-guide/#test-your-agents","title":"Test your Agents","text":"<p>Demo Video</p> <p>Try with generic query - This should use backend knowledge base for generic health insurance queries</p> <ul> <li>Below query responses should come from \"nsa-health-insurance-basics.pdf\" document</li> </ul> <pre><code>1: Does a Health Plan Typically Pay for Services from Any Doctor?\n2: What are some typically costs that consumers pay when they have insurance ?\n3: Can you please share examples of Health Insurance Cost Sharing ?\n4: Can you share more details on self-insured employer plans vs. fully-insured plans ?\n5: What's Explanation of Benefit (EOB) document ?\n6: Give me an example where the consumer has not paid anything toward the out-of-network deductible.\n</code></pre> <p>Health Insurance Claim process flow</p> <ul> <li>Start a new Chat for the following flow</li> </ul> <pre><code>I need to submit a new claim for a doctor's visit.\n</code></pre> <ul> <li>Agent should ask about memberId and date of birth to verify/authenticate the member details</li> </ul> <pre><code>My MemberId is MEMBER456 and date of birth is: 1985-07-22\n</code></pre> <ul> <li>Authentication would be done by calling authentication tool</li> <li>After authentication, Agent should ask for other details for initiating the claim process</li> <li> <p>User should response one of the below bases on what Agent asks for:</p> </li> <li> <p>Next, if Agent asks for the name of the patient and date of service</p> </li> </ul> <pre><code>Name of the patient is Sarah Johnson. Dr. Emily Carter on October 26th, 2023. And I also had some lab tests done at Quest Diagnostics the same day.\n</code></pre> <ul> <li>If Agent asks for description of the services or charges</li> </ul> <pre><code>I had a chest pain and Dr. Emily did some initial checks but she asked for a few lab tests that I get done by Quest Diagnostics.  Doctor's charges were $50 and Lab test charges were $150.\n</code></pre> <ul> <li>Based on the details asked by the Agent you can provide details one by one OR just provide all the below details that the user can provide from services taken.  These details in real scenario can be found in Superbill or receipts by the Doctor/Hospital or the Labs after the diagnosis:</li> </ul> <pre><code>Here are all the details:\nSuperbill - Health Clinic Inc.\nPatient: Sarah Johnson (ID: MEMBER456)\nDate of Service: 2023-10-26\nProvider: Dr. Emily Carter, NPI: 1234567890\nService Code (CPT): 99214, Diagnosis (ICD-10): M54.5, Charge: $250.00\nProvider: Quest Diagnostics, NPI: 0987654321, Charge: $120.00\nService Code (CPT): 80053 (Lab Panel), \n</code></pre> <ul> <li> <p>You can see the reasoning done by LLM used by respective Agent and check each step processed by different collaborator agents calling different tools. Output of each tool call is shown under each step.</p> </li> <li> <p>Go to your ServiceNow instance developer portal and from \"workspaces\" menu, click on \"Service Operations Workspace\" to see all the incidents:</p> </li> </ul> <p></p> <ul> <li>Here you should see the created Incident:</li> </ul> <p></p> <ul> <li>Here Clinical Review &amp; Fraud Detection along with Payment processing can be done by Human-in-the-loop.</li> </ul> <p>Important things to consider</p> <ul> <li>Make sure you go through the Agents and Tools files from the downloaded artifacts</li> <li>This use case is built using all native Agents and tools in Watsonx Orchestrate</li> <li>Agents and respective tools are deployed within wxO instance and AgentOps is taken care of.</li> <li>For adding Observability, you can integrate it with Langfuse and that would show all the traces, sessions, observations and more from all Agents, LLMs, Thinking process and much more on the dashboard.</li> <li>For further Agentic AI Governance, this can be integrated with IBM Watsonx Governance.</li> </ul> <p>Conclusion</p> <p>\ud83d\udc4f Congratulations on completing the lab! \ud83c\udf89</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/","title":"\ud83e\uddea Supply Chain Agent Lab Guide (Watsonx Orchestrate Edition)","text":""},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#use-case-implementation-guide","title":"\ud83d\udee0\ufe0f Use Case Implementation Guide","text":"<p>This guide provides step-by-step instructions for building and testing a modular supply chain planning system using IBM Watsonx Orchestrate (WXO).</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#use-case-summary","title":"\ud83d\udccc Use Case Summary","text":"<p>The use case demonstrates how multiple specialized agents can coordinate to manage the entire supply chain lifecycle, including:</p> <ol> <li>\ud83d\udce6 Demand Forecasting</li> <li> <p>Predict product demand based on historical data.</p> </li> <li> <p>\ud83d\udcca Inventory Evaluation</p> </li> <li> <p>Monitor and assess stock levels.</p> </li> <li> <p>\ud83e\udd1d Procurement Decisioning</p> </li> <li> <p>Automate vendor selection and purchase order creation.</p> </li> <li> <p>\ud83d\ude9a Logistics Planning</p> </li> <li> <p>Optimize delivery routes and timelines.</p> </li> <li> <p>\ud83d\udccb Compliance Monitoring</p> </li> <li>Validate actions against business policies and regulatory requirements.</li> </ol> <p>This system mirrors real-world workflows in manufacturing, retail, and logistics enterprises where decentralization and automation are key to efficiency.</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#example-scenarios","title":"\ud83e\udde9 Example Scenarios","text":""},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#scenario-1-end-to-end-order-fulfillment","title":"\ud83d\udd04 Scenario 1: End-to-End Order Fulfillment","text":"<p>A user submits a request to fulfill an order of 500 units: - Forecast Agent checks future demand. - Inventory Agent checks for stock availability. - Procurement Agent raises a PO for the shortfall. - Logistics Agent schedules the delivery.</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#scenario-2-predictive-planning","title":"\ud83e\udde0 Scenario 2: Predictive Planning","text":"<ul> <li>User: \"What\u2019s the demand forecast for Product Y next month?\"</li> <li>Forecast Agent predicts using past sales.</li> <li>Inventory Agent alerts on overstock/under-stock.</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#scenario-3-compliance-check","title":"\ud83d\udccb Scenario 3: Compliance Check","text":"<ul> <li>User: \"Is our supplier list aligned with ISO standards?\"</li> <li>Compliance Agent checks against policy documents.</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#prerequisites","title":"\u2705 Prerequisites","text":"<ul> <li>Make sure you've already setup the environment:</li> <li>Lab 0 - Environment setup: Pre-requisites</li> <li>ADK Installation</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#step-1-environment-setup","title":"\u2699\ufe0f Step 1: Environment Setup","text":"<pre><code># Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#step-2-create-project-structure","title":"\ud83d\udd39 Step 2: Create project structure","text":"<p>Create following folder structure -</p> <pre><code>wxo-agents ---\n              |---agents\n              |---tools\n              |---knowledge_base\n                  |---documents\n              |---requirements.txt\n              |---.importAll.sh\n</code></pre>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#step-3-agent-configuration","title":"\ud83d\udd39 Step 3: Agent Configuration","text":"<p>Each agent is defined in YAML and linked to a tool that performs a domain-specific function.</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#compliance_agentyaml","title":"\ud83d\udee1\ufe0f compliance_agent.yaml","text":"<p>Ensures regulatory and operational compliance. <pre><code>spec_version: v1\nstyle: react\nname: compliance_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  You are a compliance agent responsible for validating supplier eligibility.\n  Your task is to check vendor certifications, ESG status, and blacklist status before procurement approval.\n\ninstructions: &gt;\n  Use the `verify_compliance` tool to validate suppliers.\n  Only approve suppliers who are certified, not blacklisted, and have ESG compliance marked \"Yes\".\n\n  Respond in a markdown table with: Supplier, Certified, ESG Compliant, Blacklisted, Status (Approved/Blocked).\n  Be strict. If any condition fails, mark supplier as Blocked.\n\ncollaborators: []\n\ntools:\n  - verify_compliance\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#controller_agentyaml","title":"\ud83e\udd16 controller_agent.yaml","text":"<p>Acts as a central orchestrator and routes tasks to other agents. <pre><code>spec_version: v1\nstyle: react\nname: controller_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  You are the orchestrator agent for supply chain planning. You coordinate forecasting, inventory checks,\n  procurement, logistics, and compliance to generate a unified operational plan.\n\ninstructions: &gt;\n  You are a supply chain orchestration agent responsible for coordinating forecasting, inventory checks, procurement, compliance, and logistics.\n\n  Follow this process **based on need**:\n\n  ## Step 1: Forecast\n  Use the `generate_sales_forecast` tool to forecast future demand. Display the output as a markdown table with columns: Date, Forecast (yhat), Lower Bound, Upper Bound.\n\n  ## Step 2: Inventory Check\n  Use the `check_inventory_levels` tool to identify SKUs needing restocking. Only proceed if there are any SKUs where action = 'Restock'. Format as a markdown table.\n\n  ## Step 3: Procurement (Conditional)\n  If restocking is required, use the `generate_procurement_plan` tool. Only include SKUs flagged in Step 2. Format result as a markdown table.\n\n  ## Step 4: Compliance (Filter Blocked)\n  If procurement is done, use the `verify_compliance` tool to check supplier status. Exclude any supplier marked 'Blocked'. Format compliance results in a markdown table.\n\n  ## Step 5: Delivery Planning (Approved Suppliers Only)\n  If any suppliers are approved in Step 4, pass their entries to the `plan_deliveries` tool. Format delivery schedule as a markdown table. If no approved suppliers, state clearly: \"No approved suppliers available for delivery planning.\"\n\n  Be concise. Label each section clearly. Only include steps relevant based on the prior step's data.\n\n\n\ncollaborators:\n  - forecast_agent\n  - inventory_agent\n  - procurement_agent\n  - compliance_agent\n  - logistics_agent\n\ntools:\n  - generate_sales_forecast\n  - check_inventory_levels\n  - generate_procurement_plan\n  - verify_compliance\n  - plan_deliveries\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#forecast_agentyaml","title":"\ud83d\udcc8 forecast_agent.yaml","text":"<p>Handles demand forecasting using statistical or ML models. <pre><code>spec_version: v1\nstyle: react\nname: forecast_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  You are a supply chain agent that specializes in **demand forecasting** for retail, pharma, and manufacturing clients.\n  Your purpose is to help supply chain planners make better stocking decisions by forecasting demand patterns.\n\ninstructions: &gt;\n  Always use **weekly frequency** for the next **4 periods** unless the user specifies otherwise.\n  Forecast future demand using the `generate_sales_forecast` tool.\n  Return the forecast in a **GitHub markdown table** with the following columns:\n  - Date\n  - Forecast Value (yhat)\n  - Confidence Interval (yhat_lower - yhat_upper)\n\n  Avoid explaining how the forecast is calculated. Assume the user is a domain expert.\n  If confidence interval is narrow (upper - lower &lt; 10), mention it's a **high confidence** forecast.\n  Otherwise, note it's a **moderate confidence** forecast.\n\ncollaborators: []\n\ntools:\n  - generate_sales_forecast\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#inventory_agentyaml","title":"\ud83c\udff7\ufe0f inventory_agent.yaml","text":"<p>Monitors stock levels, generates reorder alerts. <pre><code>spec_version: v1\nstyle: react\nname: inventory_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  You are a supply chain agent that monitors inventory levels across warehouses and SKUs.\n  Your job is to identify low stock, stockouts, and flag restocking needs proactively.\n\ninstructions: &gt;\n  Use the `check_inventory_levels` tool to evaluate current stock levels.\n  Respond with a markdown table including SKU, current stock, reorder level, and action (Restock/OK).\n\n  Only flag items for restocking if the current stock is less than or equal to the reorder threshold.\n  Do not recommend specific vendors \u2013 leave that to the ProcurementAgent.\n\n  After identifying SKUs needing restocking, trigger optimization by calling the `optimizer_agent` with `agent_type: \"inventory\"`.\n\ncollaborators: []\n\ntools:\n  - check_inventory_levels\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#logistics_agentyaml","title":"\ud83d\ude9a logistics_agent.yaml","text":"<p>Plans and simulates transport, routing, and deliveries. <pre><code>spec_version: v1\nstyle: react\nname: logistics_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  You are a supply chain agent responsible for delivery and shipment planning.\n  Your role is to schedule and prioritize deliveries based on procurement lead times and urgency.\n\ninstructions: &gt;\n  Use the `plan_deliveries` tool to generate delivery schedules from the procurement plan.\n  Use the supplier lead time to calculate the expected delivery date.\n  If today's date is provided, use it to compute the delivery ETA. Otherwise, assume today.\n\n  Respond with a markdown table containing: SKU, Supplier, Dispatch Date, Delivery ETA, Priority (High/Normal).\n  Mark items with lead_time &lt;= 3 as High priority.\n\ncollaborators: []\n\ntools:\n  - plan_deliveries\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#procurement_agentyaml","title":"\ud83d\udce6 procurement_agent.yaml","text":"<p>Handles vendor communication and purchase order execution. <pre><code>spec_version: v1\nstyle: react\nname: procurement_agent\nllm: watsonx/meta-llama/llama-3-2-90b-vision-instruct\ndescription: &gt;\n  You are a supply chain agent responsible for procurement decisions.\n  You decide which supplier to order from based on stock needs, vendor lead time, and cost.\n\ninstructions: &gt;\n  Use the `generate_procurement_plan` tool to match SKUs needing restock with the best available supplier.\n  Always choose the vendor with the lowest cost and acceptable lead time.\n\n  Respond in a markdown table with columns: SKU, Quantity Needed, Supplier, Lead Time (days), Unit Cost.\n\n  Use internal data \u2014 no need to ask the user for SKUs or supplier information.\n\n\ncollaborators: []\n\ntools:\n  - generate_procurement_plan\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#step-4-define-tool-logic","title":"\ud83d\udd39 Step 4: Define Tool Logic","text":"<p>Each tool file implements the logic invoked by the respective agent.</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#toolscompliance_toolpy","title":"tools/compliance_tool.py","text":"<p>Enforces business rules and audits operations. <pre><code># Paste compliance tool code here\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#toolsforecast_toolpy","title":"tools/forecast_tool.py","text":"<p>Forecasts demand for products over time. <pre><code>from ibm_watsonx_orchestrate.agent_builder.tools import tool\nfrom prophet import Prophet\nimport pandas as pd\n\n@tool\ndef generate_sales_forecast(freq: str = 'W', periods: int = 4) -&gt; list:\n    \"\"\"\n    Forecast sales using hardcoded data and return predictions.\n\n    Parameters:\n    - freq: Frequency of forecast ('W' for weekly)\n    - periods: Number of periods to forecast\n\n    Returns:\n    - A list of dictionaries with forecast results:\n      - 'date'\n      - 'predicted_sales'\n      - 'lower_bound'\n      - 'upper_bound'\n    \"\"\"\n    # Hardcoded historical sales data\n    data = pd.DataFrame({\n        \"ds\": pd.date_range(start=\"2025-01-01\", periods=10, freq=\"W\"),\n        \"y\": [180, 190, 200, 210, 205, 215, 220, 225, 230, 235]\n    })\n\n    model = Prophet()\n    model.fit(data)\n    future = model.make_future_dataframe(periods=periods, freq=freq)\n    forecast = model.predict(future)\n\n    result = forecast.tail(periods)[[\"ds\", \"yhat\", \"yhat_lower\", \"yhat_upper\"]]\n    return [\n        {\n            \"date\": row[\"ds\"].strftime(\"%Y-%m-%d\"),\n            \"predicted_sales\": round(row[\"yhat\"], 2),\n            \"lower_bound\": round(row[\"yhat_lower\"], 2),\n            \"upper_bound\": round(row[\"yhat_upper\"], 2),\n        }\n        for _, row in result.iterrows()\n    ]\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#toolsinventory_toolpy","title":"tools/inventory_tool.py","text":"<p>Evaluates and maintains optimal inventory levels. <pre><code>from ibm_watsonx_orchestrate.agent_builder.tools import tool\nimport pandas as pd\n\n@tool\ndef check_inventory_levels() -&gt; list:\n    \"\"\"\n    Checks hardcoded inventory levels and flags items that need restocking.\n\n    Returns:\n    - A list of dictionaries with keys:\n        - 'sku'\n        - 'current_stock'\n        - 'reorder_level'\n        - 'action' ('Restock' or 'OK')\n    \"\"\"\n    data = {\n        \"sku\": [\"SKU001\", \"SKU002\", \"SKU003\", \"SKU004\"],\n        \"current_stock\": [5, 12, 2, 20],\n        \"reorder_level\": [10, 10, 5, 15]\n    }\n    df = pd.DataFrame(data)\n    df[\"action\"] = df.apply(\n        lambda row: \"Restock\" if row[\"current_stock\"] &lt;= row[\"reorder_level\"] else \"OK\",\n        axis=1\n    )\n    return df[[\"sku\", \"current_stock\", \"reorder_level\", \"action\"]].to_dict(orient=\"records\")\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#toolslogistics_toolpy","title":"tools/logistics_tool.py","text":"<p>Simulates delivery routes and schedules logistics. <pre><code>from ibm_watsonx_orchestrate.agent_builder.tools import tool\nfrom datetime import datetime, timedelta\n\n@tool\ndef plan_deliveries(today: str = None) -&gt; list:\n    \"\"\"\n    Generate delivery ETA and priority based on procurement plan.\n\n    Returns:\n    - A list of dictionaries with:\n        - 'sku'\n        - 'supplier'\n        - 'dispatch_date'\n        - 'delivery_eta'\n        - 'priority' (High if lead_time_days &lt;= 3, else Normal)\n    \"\"\"\n    try:\n        # Simulated procurement plan (from previous step)\n        procurement_plan = [\n            {\"sku\": \"SKU001\", \"supplier\": \"Supplier A\", \"lead_time_days\": 3},\n            {\"sku\": \"SKU002\", \"supplier\": \"Supplier C\", \"lead_time_days\": 5},\n            {\"sku\": \"SKU003\", \"supplier\": \"Supplier B\", \"lead_time_days\": 2},  # Blocked\n        ]\n\n        # Only allow compliant suppliers\n        approved_suppliers = {\"Supplier A\", \"Supplier E\"}  # From verify_compliance()\n\n        base_date = datetime.strptime(today, \"%Y-%m-%d\") if today else datetime.today()\n        schedule = []\n\n        for row in procurement_plan:\n            supplier = row.get(\"supplier\")\n            if supplier not in approved_suppliers:\n                continue  # Skip blocked suppliers\n\n            try:\n                lead_time = int(row[\"lead_time_days\"])\n                eta = base_date + timedelta(days=lead_time)\n                schedule.append({\n                    \"sku\": row[\"sku\"],\n                    \"supplier\": supplier,\n                    \"dispatch_date\": base_date.strftime(\"%Y-%m-%d\"),\n                    \"delivery_eta\": eta.strftime(\"%Y-%m-%d\"),\n                    \"priority\": \"High\" if lead_time &lt;= 3 else \"Normal\"\n                })\n            except Exception as e:\n                schedule.append({\n                    \"sku\": row.get(\"sku\", \"Unknown\"),\n                    \"supplier\": supplier,\n                    \"error\": f\"Failed to calculate ETA: {str(e)}\"\n                })\n\n        return schedule if schedule else [{\"info\": \"No deliveries scheduled due to compliance filtering.\"}]\n\n    except Exception as e:\n        return [{\"error\": str(e)}]\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#toolsprocurement_toolpy","title":"tools/procurement_tool.py","text":"<p>Triggers supplier selection and order placements. <pre><code>from ibm_watsonx_orchestrate.agent_builder.tools import tool\n\n@tool(description=\"Generate procurement plan by matching SKUs needing restock with the best supplier.\")\ndef generate_procurement_plan() -&gt; list:\n    \"\"\"\n    Match SKUs needing restock with the best supplier (based on cost and lead time).\n\n    Returns:\n    - List of procurement plans, each with:\n        - 'sku'\n        - 'quantity_needed'\n        - 'supplier'\n        - 'lead_time_days'\n        - 'unit_cost'\n    \"\"\"\n    try:\n        # Hardcoded restock data\n        restock_data = [\n            {\"sku\": \"SKU001\", \"current_stock\": 5, \"reorder_level\": 15},\n            {\"sku\": \"SKU002\", \"current_stock\": 20, \"reorder_level\": 25},\n            {\"sku\": \"SKU003\", \"current_stock\": 2, \"reorder_level\": 10},\n        ]\n\n        # Hardcoded supplier data\n        suppliers_data = [\n            {\"sku\": \"SKU001\", \"supplier\": \"Supplier A\", \"lead_time_days\": 3, \"unit_cost\": 10.5},\n            {\"sku\": \"SKU001\", \"supplier\": \"Supplier B\", \"lead_time_days\": 2, \"unit_cost\": 11.0},\n            {\"sku\": \"SKU002\", \"supplier\": \"Supplier C\", \"lead_time_days\": 5, \"unit_cost\": 9.0},\n            {\"sku\": \"SKU003\", \"supplier\": \"Supplier A\", \"lead_time_days\": 1, \"unit_cost\": 15.0},\n            {\"sku\": \"SKU003\", \"supplier\": \"Supplier B\", \"lead_time_days\": 2, \"unit_cost\": 14.5},\n        ]\n\n        plan_rows = []\n\n        for restock in restock_data:\n            quantity_needed = restock[\"reorder_level\"] - restock[\"current_stock\"]\n            if quantity_needed &lt;= 0:\n                continue\n\n            options = [s for s in suppliers_data if s[\"sku\"] == restock[\"sku\"]]\n            if options:\n                best_option = sorted(options, key=lambda x: (x[\"unit_cost\"], x[\"lead_time_days\"]))[0]\n                plan_rows.append({\n                    \"sku\": restock[\"sku\"],\n                    \"quantity_needed\": quantity_needed,\n                    \"supplier\": best_option[\"supplier\"],\n                    \"lead_time_days\": best_option[\"lead_time_days\"],\n                    \"unit_cost\": best_option[\"unit_cost\"],\n                })\n\n        return plan_rows\n\n    except Exception as e:\n        return [{\"error\": str(e)}]\n</code></pre></p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#step-5-register-all-tools","title":"\ud83d\udd39 Step 5: Register All Tools","text":"<p>This script imports all tools and registers them in your Orchestrate environment.</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#import-allsh","title":"<code>import-all.sh</code>","text":""},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#usrbinenv-bash-set-x-activate-the-local-environment-orchestrate-env-activate-local-resolve-absolute-path-of-current-script-script_dir-cd-dirname-bash_source0-devnull-pwd-import-tools-for-tool_path-in-forecast_toolpy-inventory_toolpy-procurement_toolpy-logistics_toolpy-compliance_toolpy-do-orchestrate-tools-import-k-python-f-script_dirtoolstool_path-r-script_dirtoolsrequirementstxt-done-import-agents-for-agent_yaml-in-forecast_agentyaml-inventory_agentyaml-procurement_agentyaml-logistics_agentyaml-compliance_agentyaml-controller_agentyaml-do-orchestrate-agents-import-f-script_diragentsagent_yaml-done-optional-list-everything-orchestrate-tools-list-orchestrate-agents-list-orchestrate-knowledge-bases-list","title":"<pre><code>#!/usr/bin/env bash\nset -x\n\n# Activate the local environment\norchestrate env activate local\n\n# Resolve absolute path of current script\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &amp;&gt; /dev/null &amp;&amp; pwd )\n\n# Import tools\nfor tool_path in forecast_tool.py inventory_tool.py procurement_tool.py logistics_tool.py compliance_tool.py; do\n  orchestrate tools import -k python -f \"${SCRIPT_DIR}/tools/${tool_path}\" -r \"${SCRIPT_DIR}/tools/requirements.txt\"\ndone\n\n# Import agents\nfor agent_yaml in forecast_agent.yaml inventory_agent.yaml procurement_agent.yaml logistics_agent.yaml compliance_agent.yaml controller_agent.yaml; do\n  orchestrate agents import -f \"${SCRIPT_DIR}/agents/${agent_yaml}\"\ndone\n\n# (Optional) List everything\norchestrate tools list\norchestrate agents list\norchestrate knowledge-bases list\n</code></pre>","text":""},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#sample-user-questions","title":"\u2753 Sample User Questions","text":"<p>Use the controller agent to handle business queries such as:</p> <ul> <li>\"Forecast sales for SKU001 for the next month\"</li> <li>\"We need to restock SKU001 and choose the best vendor.\"</li> <li>\"Can you do a end to end planning for the upcoming cycle?\"</li> <li>\"Verify compliance of Supplier A with ESG norms.\"</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#done","title":"\ud83c\udf1f Done!","text":"<p>Your WXO-powered multi-agent supply chain simulation is now up and running!</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/lab-guide/#i-additional-notes","title":"\u2139\ufe0f Additional Notes","text":"<ul> <li>Ensure all credentials, endpoints, and tokens are set in environment variables or passed securely.</li> <li>Logging and debugging utilities are recommended for production.</li> </ul> <p>Feel free to update the guide as your implementation evolves!</p> <p>Conclusion</p> <p>\ud83d\udc4f Congratulations on completing the lab! \ud83c\udf89</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/","title":"Supply chain use case","text":"<p>This use case demonstrates how AI-powered agents can streamline end-to-end supply chain operations by handling domain-specific tasks and collaborating autonomously to achieve operational efficiency and business continuity.</p> <p>At the planning stage, the Forecast Agent estimates product demand trends using historical data. This drives informed decisions for stock replenishment and production.</p> <p>Simultaneously, the Inventory Agent evaluates stock levels, identifying shortages or surpluses and triggering replenishment tasks if needed. If new materials are required, the Procurement Agent negotiates purchases based on pricing logic and supplier policies.</p> <p>The Logistics Agent handles routing and delivery schedules, ensuring cost-effective and timely distribution. Throughout this process, the Compliance Agent ensures all actions align with internal business rules and external regulations.</p> <p>The Controller Agent serves as the central decision-maker, dynamically delegating tasks across agents based on the user's query or business trigger.</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#the-problem","title":"\ud83e\uddfe The Problem","text":"<p>Traditional supply chain workflows are highly siloed, manual, and sequential. This leads to:</p> <ul> <li>\u23f1\ufe0f Slow response times when demand changes</li> <li>\u26a0\ufe0f Missed cost-saving opportunities due to poor procurement coordination</li> <li>\ud83d\ude9a Inefficient routing and logistics delays</li> <li>\ud83d\udcc9 High overhead in compliance reporting</li> </ul> <p>As a result, enterprises face:</p> <ul> <li>\ud83d\udd04 Disconnected planning across departments</li> <li>\ud83e\uddfe Manual reviews for every adjustment or policy check</li> <li>\ud83d\udcb8 Operational costs due to rework and poor visibility</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#as-is-architecture","title":"As-Is Architecture","text":""},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#objective","title":"\ud83c\udfaf Objective","text":"<p>To build an agentic AI-based supply chain automation system that improves:</p> <ul> <li>Speed of response to demand or risk</li> <li>Planning and execution accuracy</li> <li>Collaboration across stakeholders</li> <li>Scalability of operations with minimal human effort</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#key-highlights","title":"\u2705 Key Highlights","text":""},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#1-forecast-agent","title":"\ud83e\udd16 1. Forecast Agent","text":"<ul> <li>Predicts future demand trends using historical data</li> <li>Drives smarter procurement and production</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#2-inventory-agent","title":"\ud83d\udce6 2. Inventory Agent","text":"<ul> <li>Continuously monitors stock levels</li> <li>Raises restock alerts or triggers orders automatically</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#3-procurement-agent","title":"\ud83d\udce5 3. Procurement Agent","text":"<ul> <li>Finds optimal vendors and initiates purchase orders</li> <li>Supports dynamic price and volume negotiation logic</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#4-logistics-agent","title":"\ud83d\ude9b 4. Logistics Agent","text":"<ul> <li>Plans distribution schedules and delivery routes</li> <li>Simulates estimated arrival times</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#5-compliance-agent","title":"\u2705 5. Compliance Agent","text":"<ul> <li>Checks if each action complies with internal/external policy</li> <li>Prevents policy violations proactively</li> </ul>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#business-value","title":"\ud83d\ude80 Business Value","text":"<ol> <li>Automated coordination reduces email and task follow-ups</li> <li>Demand-aware procurement minimizes waste and improves margins</li> <li>Faster shipping cycles improve customer satisfaction</li> <li>Built-in compliance simplifies audits and reduces risk</li> <li>Centralized controller agent boosts agent synergy and efficiency</li> </ol>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#agent-collaboration-model","title":"\ud83e\udde0 Agent Collaboration Model","text":"<p>The diagram below shows how agents collaborate to handle a supply chain query, such as:</p> <p>\"Fulfill an order of 500 units of Product A\"</p> <ol> <li>Forecast Agent evaluates demand.</li> <li>Inventory Agent checks current stock.</li> <li>Procurement Agent raises PO if needed.</li> <li>Logistics Agent simulates delivery.</li> <li>Compliance Agent ensures all steps meet policies.</li> </ol>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#step-by-step-hands-on-instructions","title":"Step-by-Step Hands-on Instructions","text":"<p>Follow the lab guide to build this system: \ud83d\udcd8 Lab Guide</p>"},{"location":"use-cases-for-labs/pro-code/supply-chain/supply-chain/#demo-video","title":"\ud83c\udfa5 Demo Video","text":"<p>Watch a walkthrough of this solution in action: Supply Chain Agent Demo</p>"}]}